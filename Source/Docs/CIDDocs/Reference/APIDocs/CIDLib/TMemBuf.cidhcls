<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE CppClass PUBLIC "urn:charmedquark.com:CIDLib-Documentation.DTD" "CIDLibDocs.DTD">

<CppClass Class="TMemBuf" Prefix="mbuf" Parent="TObject" Flags="BStrm">

    <Desc>
        <P>TMemBuf is abstract base class for all of the memory buffer oriented classes. We have derivatives for heap based buffers, system memory based buffers, and shared buffers.</P>

        <P>This class defines an interface via which you can manage memory buffers generically without having to worry how they get allocated and freed.</P>
    </Desc>

    <PubIntf>
        <Ctors>
             <!-- The dtor is virtual so we have to do it separatekly -->
            <Method Name="~TMemBuf">
                <Desc>Just cleans up the memory buffer</Desc>
                <MethVar/>
            </Method>
        </Ctors>

        <Operators>
            <Method Name="operator[]" RetType="tCIDLib::TCard1">
                <Desc>
                    The const version returns the byte at the indicated index by value. The non-const version returns a reference so that you can set the value.
                </Desc>
                <MethVar RetBy="Ref"><MethParam Name="c4Index" Type="tCIDLib::TCard4"/></MethVar>
                <MethVar Attrs="Const"><MethParam Name="c4Index" Type="tCIDLib::TCard4"/></MethVar>
            </Method>
        </Operators>


        <!-- Virtual public methods -->
        <VirtMeths>
            <Method Attrs="Pure" Name="StreamCount">
                <Desc>
                    <P>A helper that will do the same thing as the StreamTo() method of the MStreamable class, but will only stream an indicated number of bytes of the buffer. The StreamTo() method doesn't know anything but to write all the bytes of the buffer's allocation. That's not always desirable.</P>

                    <P>You could call this to write out some known used number of bytes and later do a StreamFrom(), via the >> operator of course, and it will work since they do the same thing in terms of the data format. The buffer will stream in the number of bytes this call streamed out.</P>
                </Desc>
                <MethVar>
                    <MethParam Name="strmToWriteTo" Type="TBinOutStream" PBy="Ref" Dir="Out"/>
                    <MethParam Name="c4Count" Type="tCIDLib::TCard4"/>
                </MethVar>
            </Method>

        </VirtMeths>

    </PubIntf>

</CppClass>
