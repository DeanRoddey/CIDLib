<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE HelpPage PUBLIC "urn:charmedquark.com:CIDLib-Documentation.DTD" "CIDLibDocs.DTD">

<HelpPage>
    <Title>The Philosophy of CIDLib</Title>

    <HelpText>

        <P>Here again, we won't dwell too much on this stuff, and I've put it last in the list for this section, but some folks might be interested and it's worth understanding probably. Most systems have some driving philosophy. As some of us probably have experienced, sometimes perhaps it has more than one and they aren't necessarily in alignment, or they may have changed over time but not been fully applied to existing code.</P>

        <P>CIDLib is perhaps a bit ununual for a project of this size in that it has a single author and hence and single set of beliefs, goals, prejudices, whatever you choose to call them. I think that's a good thing. We've got plenty of committee designed systems out there, so something different is an interesting change of pace perhaps.</P>

        <P>Anyway, here are some key philosophical ideas behind why CIDLib is the way it is. Some of the most obvious ones will have been mentioned in passing elsewhere, but this just gathers them into a single spot so that you can build up maximum froth at how woefully pathetic and wrong I am. These are in no particular order of importance or other criteria.</P>

        <SecTitle>All as One</SecTitle>

        <P>This is been covered a bit in other places, but a fundamental philosophical tenent of CIDLib is that the pieces and parts scheme that makes up most C++ programs is not a good thing, it's just a necessity if you don't have any alternative. Other major languages have fairly broad standard libraries that deal with the kinds of things that real world applications these days need to deal with, not requiring third party libraries to build fairly standard applications.</P>

        <P>CIDLib is about a monolithic architecture where everything is consistent. Monolithic doesn't mean you get it all or nothing, it's obviously split into separate libraries. But it's monolithic in terms of style and and architecture.</P>

        <SecTitle>No STL</SecTitle>

        <P>In CIDLib the standard C++/STL libraries are not used. So many people will just immediately say there's no excuse not to use them or scream about not invented here syndrome, but there are enormous reasons not to use them. Most people just have never even thought about a world without them and how much of a limitation they are. If you want to create a consistent world, you cannot use a big chunk of code onto which you cannot impose any common functionality. And, let's face it, a lot of the standard libraries are very dated.</P>

        <P>Look at the Smart Enums section to the left, for a perfect example. It would be impossible to impose such a thing on the standard libraries, so at best it would be a huge, inconsistent mess. The same with things like our binary streaming system, which is vastly superior and the basis for so much powerful functionality in CIDLib. There's no way to force the standard library classes to take part in these things.</P>

        <P>So it becomes a matter of serious compromise to use them, and I have no interest in working my life away to create a significantly compromised system.</P>

        <SecTitle>Let the 10% Fend for Themselves</SecTitle>

        <P>I believe that too much general purpose code, particularly over time, tends towards maximum complexity because it tries to be too many things to too many people. In particular it tries to handle more and more off the beaten path scenarios, such as really high performance constraints.</P>

        <P>As we all know, and have enshrined in the "don't prematurely optimize" mantra, only a small portion of the code in the bulk of programs is likely to really have a significant effect on performance. And, for a lot of applications, they are not really even performance constrained at all.</P>

        <P>So, if I double the complexity of CIDLib to deal with that quite small extra bit of territory, that's not a good tradeoff. It means that I'm making the system harder to maintain and improve, more likely to have bugs, more likely to break with change, without really significantly expanding its applicability, and can introduce fewer new features in a given period of time. That is stealing from the 90% to pay the 10%.</P>

        <P>I say let the 10% use specialized tools. Either write something custom that deals with their particular contraints, or use something someone else with similar constraints has already written. And, similarly, for that tiny percentage of code in a given application that will actually provide a significant performance increase, deal with that specifically.</P>

        <P>That may not be popular but I believe it to be an effective strategy. We all know that complexity is the real enemy in non-trivial software development, and significant optimization means very significant increases in complexity and fragility. It's not a good trade off for most of the people using the software.</P>

        <SecTitle>Avoid Over-Templatization</SecTitle>

        <P>The modern C++ world is overrun with templates. When you are building large software products, having massive amounts of inlined code is just not a good idea. It's also impossible to hide details and very difficult to maintain binary compatibility over even simple changes. Not to mention a lot of code bloat. And an inability to protect your intellectual property because so much of it is inlined.</P>

        <P>CIDLib uses templates where they are really useful, which mostly means provides compile time type safety where it wouldn't be possible or practical to other ways. But, otherwise, it just turns its back on the modern C++ paradigm of almost everything being a template. That makes it easier to debug, easier to understand, easier to patch in the field and make non-breaking revision releases. And you don't get the phone book for an error message if you make a mistake.</P>

        <P>In actual fact, CIDLib tries to push as much code out of line as is reasonable without over-complicating things. And, even where it has to use templates it tries to push as much of that out of line as possible as well, using a base class or a helper namespace and so forth to deal with parts of that code that don't depend on the parameter types.</P>

        <SecTitle>Output Parameters</SecTitle>

        <P>I find the modern C++ belief that returning copies of five different things by value as a return value from a method/function in order to avoid just using an output parameter to be bizarre, to put it lightly. Output parameters are vastly more performant in a lot of cases, and they just aren't hard to understand. Particularly in a modern era where you can see signatures and parameter names and comments and documentation on the fly, it just makes no sense to me why so many people seem to think they are somehow horrible.</P>

        <P>I see a lot of arguments that you can't know if they are input or output or both. Well, that's what documentation is for. If you are calling methods without even bothering to read the documentation, that's a problem already. In particular if a method gets called in a loop, using an output parameter can be enormously more efficient because the called method can often just reuse the existing content and just update it. No amount of copy semantics will beat that for performance.</P>

        <SecTitle>Pointers aren't Cancerous</SecTitle>

        <P>Though CIDLib uses smart pointers to good effect, it doesn't pretend like any visible pointer is some sort of cancer than will kill its user within minutes. If a class allocates objects internally for its own use, then those objects are already owned and that class cleans them up. It's redundant and just adding more complexity to put them in smart pointers unless they are shared in some way.</P>

        <P>And smart pointers don't magically get rid of ownership problems in C++. Nothing does. They require just as much careful use as pointers for the most part, the potential dangers are just different ones.</P>

        <P>Though there are various places where more smart usage will likely be added in the future, for the most part CIDLib doesn't take the modern view that pointers, at least with the confines of an owning class, cannot be safely dealt with. Generally, if an object is providing some sort of 'factory' functionality, it returns the raw allocated object. It lets the caller use the strategy he wants to insure it gets cleaned up, or given back if it's an object pool type scenario.</P>

        <SecTitle>The Heap isn't Cancerous</SecTitle>

        <P>So many people today seem to think that allocating something on the heap is going to cause the universe to implode or something. Most programs are not even going to experience a noticeable performance difference either way. And often using the heap can make a lot of things more straightforward, avoid a lot of potential undefined behavior, and still also make a lot of things faster.</P>

        <P>For instance, CIDLib's 'by value' vectors actually allocate an array of pointers. The elements are heap allocated objects that are put into that array. Some modernists might gasp at the horror of that. But it has a lot of benefits. To start with it's fairly likely that you access and manipulate those elements far many more times than you create and destroy them. So anything that makes access a lot faster and simpler probably will make up for, or at least counter-balance, any cost related to allocation and destruction.</P>

        <P>Obvious examples are that expanding a CIDLib vector won't invalidate references to elements in the vector, or invalidate cursors for that collection. It means that inserting or removing an element or range is nothing but a block move of pointers, and they also will not invalidate references though cursors will mark themselves as invalid just in case (still not undefined behavior though since they know they are invalid.) Sorting and swapping are just moving pointers around. You don't risk a stack overflow if the vector gets too big.</P>

        <P>If you have some application where this is not an acceptable solution, then of course don't use a vector. But, for most of the code in most applications it's not a problem at all and may actually have better performance if there's much manipulation of the objects in the vector. And it reduces a lot of possible undefined behavior, which is a very good thing.</P>

        <SecTitle>No Allocators</SecTitle>

        <P>Relative to a few of the above points, CIDLib doesn't support any sort of custom allocator scheme. This is also a massive complication that almost no users of the code would benefit from, so it's not a good trade off.</P>

        <P>Instead it provides 'pools', which allow you to use and return already allocated objects very efficiently and safely. These are used to good effect in CIDLib and the CQC system built on top of it. If this is not sufficient for your needs, then some other custom mechanism would be required, since again this code is in the 10% crowd. If there is a reasonably common need for any particular such mechanism, and it doesn't involve pushing a lot of complications into other code that wouldn't need it 90% of the time, it could be implemented as a standard feature.</P>

        <SecTitle>Thread Safety</SecTitle>

        <P>It should be assumed that the instances of any class not explicitly documented as being thread safe, should not be accessed by multiple threads without explicit synchronization of some sort.</P>

        <P>You will sometimes here about 'thread compatible' vs. 'thread safe'. Thread compatible means that calls that don't change the state of the object can be called without any synchronization, but calls that change it cannot. Thread safe means that both types of calls can be made without synchronization.</P>

        <P>CIDLib takes the approach that thread compatible is fools gold. Any class that doesn't explicitly deal with thread safety is likely to be changed at some point, in some way, that suddenly makes it not exactly thread compatible, and catching such an error can be brutally difficult. Therefore, CIDLib takes the position that it's thread safe or not at all.</P>

        <P>Yes that does mean potentially some extra synchronization overhead, but that's trivial compared to the incredibly nasty bugs that can creep into a large code base in the fullness of time.</P>

        <P>It is of course fine for specific methods of a class to be explicitly declared thread compatible because all it does is return a value of a fundamental type. But make sure that is very carefully documented, such that it's difficult to change those methods without dealing with this issue. These would often also just be inlined.</P>

        <P>But you better be sure that no code accesses two of these values and makes any assumptions that their values represent any coherent relationship, because they could have been modified by another thread between the getting of one value and the getting of another. Hence why it's probably best to just bite the bullet and be hard core about this issue.</P>

    </HelpText>

</HelpPage>
