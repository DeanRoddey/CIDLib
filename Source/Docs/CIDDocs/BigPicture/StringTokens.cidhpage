<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE HelpPage PUBLIC "urn:charmedquark.com:CIDLib-Documentation.DTD" "CIDLibDocs.DTD">

<HelpPage>
    <Title>Text Replacement Tokens</Title>

    <HelpText>

        <P>And extremely common operation for any program that manipulates text, which is most all of them, is to take some value and format it into an existing string at a particular point. This is a fundamental aspect of translatable text, for instance, where you have loadable, translatable text but need to put some other content into them that is only available at runtime.</P>

        <P>Most system have some sort of replacement token scheme to support this, and CIDLib is no different. The <ClassRef Ref="TString"/> class provides support for replacing tokens in the string content with any fundamental type or any class that implements the <ClassRef Ref="MFormattable"/> mixin class.</P>

        <P>A token is represented by any alphanumeric character and it's simplest form is:</P>

        <Code>    %(x)</Code>

        <P>So it's always a percent sign followed by at least a character in parens. You will indicate that character you want to target when you replace a token.</P>

        <P>However, you can also do some useful formatting with tokens as well. The full form of a token is:</P>

        <Code>    %(x, width, fillchar)</Code>

        <P>The width indicates the width of the character field to format the passed replacement token into before inserting it into the field. So, this combination of original string and replacement value:</P>

        <Code>
        TString strMsg("The cost is: $%(c,7)");
        strMsg.eReplaceToken(L'c', TMoney(15.10));
        </Code>

        <P>Would result in a string like "The cost is: $  15.10". So the money value would be formatted according to money formatting rules, and then it would be placed into a 7 character wide field and leading filled with spaces. If you don't indicate a fill character it's assumed to be space.</P>

        <P>If you want to left justify the value, use a negative number so this:</P>

        <Code>
        TString strMsg("The cost is: $%(c,-7,*)");
        strMsg.eReplaceToken(L'c', TMoney(15.10));
        </Code>

        <P>Would result in a string like "The cost is: $15.10**", since we indicated we wanted a fill character of '*'.</P>

        <SecTitle>Load and Replace</SecTitle>

        <P>One extremely common operation is to load a translatable text string from a facility and to replace tokens in that string with actual runtime data. This could be a quite annoying and wordy undertaking given how many places a correctly translatable program would need to do it. So CIDLib provides mechanisms to do it all in one shot. You can either construct a string and provide info on the test to load, or call a method on it to load that text after the fact, or you can call methods on the target facility to load up the text into a provided string, whatever works best for you.</P>

        <P>Any class that implements MFormattable can be used as a replacement token in these calls. Here is an example from a bogus example program called Magnum. It has created a facility class/object as all well behaved, non-trivial CIDLib based applications do (see the facility related links to the left.)</P>

        <Code>
        TString strMsg(kMagnumMsgs::midOpts_Delete, facMagnum, strTarFile);
        </Code>

        <P>So here we construct a string, passing it the msg id generated by the build utility, and the facility object that owns that message. It hasses a target file that presumably the user has selected, and that is going to be used to replace the %(1) token in the text. The constructor, as well as the other varations, take from one to four such replacement tokens, and they (positionally) replace tokens 1, 2, 3 and 4. IF the text is translated and the tokens moved around, they will still target the right numbered tokens.</P>

        <P>To load it via the facility, it would look like this. Note in this case, it's not a constructor, so we can get a result as to whether it loaded or not.</P>

        <Code>
        if (facMagnum.bLoadCIDMsg(kMagnumMsgs::midOpts_Delete, strToFill, strTarFile))
        {
        }
        </Code>

    </HelpText>

</HelpPage>

