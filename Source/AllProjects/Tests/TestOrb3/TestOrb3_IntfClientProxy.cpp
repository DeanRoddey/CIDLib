// ----------------------------------------------------------------------------
//  FILE: TestOrb3_IntfClientProxy.cpp
//  DATE: Tue, Feb 26 15:38:53 2019 -0500
//    ID: 9E7B4A7A069E4160-578F52288498BBF0
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "TestOrb3.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TTestOrb3IntfClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TTestOrb3IntfClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TTestOrb3IntfClientProxy::strInterfaceId(L"9E7B4A7A069E4160-578F52288498BBF0");

// ----------------------------------------------------------------------------
// TTestOrb3IntfClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TTestOrb3IntfClientProxy::TTestOrb3IntfClientProxy()
{
}

TTestOrb3IntfClientProxy::
TTestOrb3IntfClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TTestOrb3IntfClientProxy::~TTestOrb3IntfClientProxy()
{
}

// ----------------------------------------------------------------------------
// TTestOrb3IntfClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TTestOrb3IntfClientProxy::AddToBuf
(
    tCIDLib::TCard4& c4BufSz_mbufToAdjust
    , THeapBuf& mbufToAdjust)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"AddToBuf");
        ocmdToUse.strmOut() << c4BufSz_mbufToAdjust;
        ocmdToUse.strmOut().c4WriteBuffer(mbufToAdjust, c4BufSz_mbufToAdjust);
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufToAdjust;
        ocmdToUse.strmIn().c4ReadBuffer(mbufToAdjust, c4BufSz_mbufToAdjust);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TCard4 TTestOrb3IntfClientProxy::c4AddTo
(
    const tCIDLib::TCard4 c4ToAdjust)
{
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4AddTo");
        ocmdToUse.strmOut() << c4ToAdjust;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TTestOrb3IntfClientProxy::DelayRet()
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DelayRet");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TTestOrb3IntfClientProxy::NoParmsNoRet()
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"NoParmsNoRet");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

TString TTestOrb3IntfClientProxy::strFormatValue
(
    const tCIDLib::TCard4 c4ToFormat)
{
    TString retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"strFormatValue");
        ocmdToUse.strmOut() << c4ToFormat;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TTestOrb3IntfClientProxy::UploadBuf
(
    const tCIDLib::TCard4 c4BufSz_mbufUpload
    , const TMemBuf& mbufUpload)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UploadBuf");
        ocmdToUse.strmOut() << c4BufSz_mbufUpload;
        ocmdToUse.strmOut().c4WriteBuffer(mbufUpload, c4BufSz_mbufUpload);
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

