// ----------------------------------------------------------------------------
//  FILE: TestOrb3_IntfServerBase.cpp
//  DATE: Tue, Feb 26 15:38:53 2019 -0500
//    ID: 9E7B4A7A069E4160-578F52288498BBF0
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "TestOrb3.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TTestOrb3IntfServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TTestOrb3IntfServerBase::strInterfaceId(L"9E7B4A7A069E4160-578F52288498BBF0");
// ----------------------------------------------------------------------------
// TTestOrb3IntfServerBase: Destructor
// ----------------------------------------------------------------------------
TTestOrb3IntfServerBase::~TTestOrb3IntfServerBase()
{
}

// ----------------------------------------------------------------------------
// TTestOrb3IntfServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TTestOrb3IntfServerBase::TTestOrb3IntfServerBase() :
    TOrbServerBase(strInterfaceId, L"TTestOrb3IntfClientProxy" )
{
}

TTestOrb3IntfServerBase::TTestOrb3IntfServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TTestOrb3IntfServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TTestOrb3IntfServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"AddToBuf")
    {
        tCIDLib::TCard4 c4BufSz_mbufToAdjust;
        orbcToDispatch.strmIn() >> c4BufSz_mbufToAdjust;
        THeapBuf mbufToAdjust(c4BufSz_mbufToAdjust + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufToAdjust, c4BufSz_mbufToAdjust);
        AddToBuf
        (
            c4BufSz_mbufToAdjust
          , mbufToAdjust
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufToAdjust;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToAdjust, c4BufSz_mbufToAdjust);
    }
     else if (strMethodName == L"c4AddTo")
    {
        tCIDLib::TCard4 c4ToAdjust;
        orbcToDispatch.strmIn() >> c4ToAdjust;
        tCIDLib::TCard4 retVal = c4AddTo
        (
            c4ToAdjust
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"DelayRet")
    {
        DelayRet
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"NoParmsNoRet")
    {
        NoParmsNoRet
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"strFormatValue")
    {
        tCIDLib::TCard4 c4ToFormat;
        orbcToDispatch.strmIn() >> c4ToFormat;
        TString retVal = strFormatValue
        (
            c4ToFormat
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"UploadBuf")
    {
        tCIDLib::TCard4 c4BufSz_mbufUpload;
        orbcToDispatch.strmIn() >> c4BufSz_mbufUpload;
        THeapBuf mbufUpload(c4BufSz_mbufUpload + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufUpload, c4BufSz_mbufUpload);
        UploadBuf
        (
            c4BufSz_mbufUpload
          , mbufUpload
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

