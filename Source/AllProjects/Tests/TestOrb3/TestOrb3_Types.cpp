// ----------------------------------------------------------------------------
//  FILE: TestOrb3_Types.cpp
//  DATE: Tue, Feb 26 15:38:53 2019 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "TestOrb3.hpp"



static TEnumMap::TEnumValItem aeitemValues_ETests[3] = 
{
    {  tCIDLib::TInt4(tTestOrb3::ETests::Val1), 0, 0,  { L"", L"Alt Value 1", L"The First Value", L"Val1", L"ETests::Val1", L"Text 1" } }
  , {  tCIDLib::TInt4(tTestOrb3::ETests::Val2), 0, 0,  { L"", L"Alt Value 1", L"The Second Value", L"Val2", L"ETests::Val2", L"Text 2" } }
  , {  tCIDLib::TInt4(tTestOrb3::ETests::Val3), 0, 0,  { L"", L"Alt Value 3", L"The Third Value", L"Val3", L"ETests::Val3", L"Text 3" } }

};

static TEnumMap emapETests
(
     L"ETests"
     , 3
     , kCIDLib::False
     , aeitemValues_ETests
     , nullptr
     , tCIDLib::TCard4(tTestOrb3::ETests::Count)
);

const TString& tTestOrb3::strAltXlatETests(const tTestOrb3::ETests eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapETests.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tTestOrb3::ETests tTestOrb3::eAltXlatETests(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tTestOrb3::ETests(emapETests.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

const TString& tTestOrb3::strAltXlat2ETests(const tTestOrb3::ETests eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapETests.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText2, bThrowIfNot);
}

tTestOrb3::ETests tTestOrb3::eAltXlat2ETests(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tTestOrb3::ETests(emapETests.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText2, bThrowIfNot));
}

tCIDLib::TVoid tTestOrb3::FormatETests(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapETests.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
TTextOutStream& operator<<(TTextOutStream& strmTar, const tTestOrb3::ETests eVal)
{
    strmTar << emapETests.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tTestOrb3::ETests operator++(tTestOrb3::ETests& eVal, int)
{
    tTestOrb3::ETests eTmp = eVal;
    eVal = tTestOrb3::ETests(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tTestOrb3::bIsValidEnum(const tTestOrb3::ETests eVal)
{
    return emapETests.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ELoadedVals[3] = 
{
    {  tCIDLib::TInt4(tTestOrb3::ELoadedVals::Val1), 101, kTestMsgs::midEnum1_Value1,  { L"", L"", L"", L"Val1", L"ELoadedVals::Val1", L"" } }
  , {  tCIDLib::TInt4(tTestOrb3::ELoadedVals::Val2), 202, kTestMsgs::midEnum1_Value2,  { L"", L"", L"", L"Val2", L"ELoadedVals::Val2", L"" } }
  , {  tCIDLib::TInt4(tTestOrb3::ELoadedVals::Val3), 303, kTestMsgs::midEnum1_Value3,  { L"", L"", L"", L"Val3", L"ELoadedVals::Val3", L"" } }

};

static TEnumMap emapELoadedVals
(
     L"ELoadedVals"
     , 3
     , kCIDLib::False
     , aeitemValues_ELoadedVals
     , &facTestOrb3
     , tCIDLib::TCard4(tTestOrb3::ELoadedVals::Count)
);

const TString& tTestOrb3::strLoadELoadedVals(const tTestOrb3::ELoadedVals eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELoadedVals.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}
tCIDLib::TInt4 tTestOrb3::i4AltNumELoadedVals(const tTestOrb3::ELoadedVals eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELoadedVals.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tTestOrb3::ELoadedVals tTestOrb3::eAltNumELoadedVals(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tTestOrb3::ELoadedVals(emapELoadedVals.eMapEnumAltNum(i4Val, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tTestOrb3::ELoadedVals eVal)
{
    strmTar << emapELoadedVals.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tTestOrb3::bIsValidEnum(const tTestOrb3::ELoadedVals eVal)
{
    return emapELoadedVals.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EBmpEnum[4] = 
{
    {  tCIDLib::TInt4(tTestOrb3::EBmpEnum::Bmp1), 0, 0,  { L"", L"", L"", L"Bmp1", L"EBmpEnum::Bmp1", L"Bmp Value 1" } }
  , {  tCIDLib::TInt4(tTestOrb3::EBmpEnum::Bmp2), 0, 0,  { L"", L"", L"", L"Bmp2", L"EBmpEnum::Bmp2", L"Bmp Value 2" } }
  , {  tCIDLib::TInt4(tTestOrb3::EBmpEnum::Bmp3), 0, 0,  { L"", L"", L"", L"Bmp3", L"EBmpEnum::Bmp3", L"Bmp Value 3" } }
  , {  tCIDLib::TInt4(tTestOrb3::EBmpEnum::Bmp23), 0, 0,  { L"", L"", L"", L"Bmp23", L"EBmpEnum::Bmp23", L"Bmp Value 2-3" } }

};

static TEnumMap emapEBmpEnum
(
     L"EBmpEnum"
     , 4
     , kCIDLib::True
     , aeitemValues_EBmpEnum
     , nullptr
     , tCIDLib::TCard4(tTestOrb3::EBmpEnum::None)
);

tCIDLib::TVoid tTestOrb3::FormatEBmpEnum(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEBmpEnum.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tTestOrb3::strXlatEBmpEnum(const tTestOrb3::EBmpEnum eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEBmpEnum.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Name, bThrowIfNot);
}

tTestOrb3::EBmpEnum tTestOrb3::eXlatEBmpEnum(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tTestOrb3::EBmpEnum(emapEBmpEnum.i4MapEnumText(strVal, TEnumMap::ETextVals::Name, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tTestOrb3::EBmpEnum eVal)
{
    strmTar << emapEBmpEnum.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tTestOrb3::bIsValidEnum(const tTestOrb3::EBmpEnum eVal)
{
    return emapEBmpEnum.bIsValidEnum(tCIDLib::TCard4(eVal));

}

