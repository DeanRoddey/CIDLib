// ----------------------------------------------------------------------------
//  FILE: CIDOrbUC_LogSrvServerBase.cpp
//  DATE: Wed, Apr 17 21:38:13 2019 -0400
//    ID: 7F1112BEFF72CF9A-1A3600EA74289F30
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CIDOrbUC_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TCIDLogSrvServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TCIDLogSrvServerBase::strInterfaceId(L"7F1112BEFF72CF9A-1A3600EA74289F30");
const TString TCIDLogSrvServerBase::strScope(L"/CIDLib/CIDLogSrv");
const TString TCIDLogSrvServerBase::strAdminBinding(L"/CIDLib/CIDLogSrv/CoreAdmin");
const TString TCIDLogSrvServerBase::strBinding(L"/CIDLib/CIDLogSrv/LogObj");


// ----------------------------------------------------------------------------
// TCIDLogSrvServerBase: Destructor
// ----------------------------------------------------------------------------
TCIDLogSrvServerBase::~TCIDLogSrvServerBase()
{
}

// ----------------------------------------------------------------------------
// TCIDLogSrvServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TCIDLogSrvServerBase::TCIDLogSrvServerBase() :
    TOrbServerBase(strInterfaceId, L"TCIDLogSrvClientProxy" )
{
}

TCIDLogSrvServerBase::TCIDLogSrvServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TCIDLogSrvServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TCIDLogSrvServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bGetLiveEvents")
    {
        tCIDLib::TCard4 c4NextEventId;
        orbcToDispatch.strmIn() >> c4NextEventId;
        TVector<TLogEvent> colToFill;
        tCIDLib::TBoolean retVal = bGetLiveEvents
        (
            c4NextEventId
          , colToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4NextEventId;
            orbcToDispatch.strmOut() << colToFill;
        }
    }
     else if (strMethodName == L"c4QueryEvents")
    {
        TVector<TLogEvent> colToFill;
        tCIDLib::TCard4 c4MaxToReturn;
        orbcToDispatch.strmIn() >> c4MaxToReturn;
        tCIDLib::TCard4 retVal = c4QueryEvents
        (
            colToFill
          , c4MaxToReturn
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryEvents1")
    {
        TVector<TLogEvent> colToFill;
        tCIDLib::TCard4 c4Minutes;
        orbcToDispatch.strmIn() >> c4Minutes;
        tCIDLib::TCard4 c4MaxToReturn;
        orbcToDispatch.strmIn() >> c4MaxToReturn;
        tCIDLib::TCard4 retVal = c4QueryEvents
        (
            colToFill
          , c4Minutes
          , c4MaxToReturn
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryEvents2")
    {
        TVector<TLogEvent> colToFill;
        tCIDLib::TCard4 c4MaxToReturn;
        orbcToDispatch.strmIn() >> c4MaxToReturn;
        TString strHostExpr;
        orbcToDispatch.strmIn() >> strHostExpr;
        TString strProcExpr;
        orbcToDispatch.strmIn() >> strProcExpr;
        TString strFacExpr;
        orbcToDispatch.strmIn() >> strFacExpr;
        TString strThreadExpr;
        orbcToDispatch.strmIn() >> strThreadExpr;
        tCIDLib::TCard8 c8SevLevels;
        orbcToDispatch.strmIn() >> c8SevLevels;
        tCIDLib::TCard8 c8ErrClasses;
        orbcToDispatch.strmIn() >> c8ErrClasses;
        tCIDLib::TCard4 retVal = c4QueryEvents
        (
            colToFill
          , c4MaxToReturn
          , strHostExpr
          , strProcExpr
          , strFacExpr
          , strThreadExpr
          , c8SevLevels
          , c8ErrClasses
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"DebugDump")
    {
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        DebugDump
        (
            c4BufSz_mbufData
          , mbufData
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"LogSingle")
    {
        TLogEvent logevToSend;
        orbcToDispatch.strmIn() >> logevToSend;
        LogSingle
        (
            logevToSend
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"LogMultiple")
    {
        TBag<TLogEvent> colErrors;
        orbcToDispatch.strmIn() >> colErrors;
        LogMultiple
        (
            colErrors
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"RemoveAll")
    {
        RemoveAll
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

