// ----------------------------------------------------------------------------
//  FILE: CIDOrbUC_RemBrowserServerBase.cpp
//  DATE: Fri, Nov 05 19:32:39 2021 -0400
//    ID: 9719B1449E1B5AC2-5A871C3214D2F876
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CIDOrbUC_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TRemBrowserServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TRemBrowserServerBase::strInterfaceId(L"9719B1449E1B5AC2-5A871C3214D2F876");
// ----------------------------------------------------------------------------
// TRemBrowserServerBase: Destructor
// ----------------------------------------------------------------------------
TRemBrowserServerBase::~TRemBrowserServerBase()
{
}

// ----------------------------------------------------------------------------
// TRemBrowserServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TRemBrowserServerBase::TRemBrowserServerBase() :
    TOrbServerBase(strInterfaceId, L"TRemBrowserClientProxy" )
{
}

TRemBrowserServerBase::TRemBrowserServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TRemBrowserServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TRemBrowserServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bFileExists")
    {
        TString strToCheck;
        orbcToDispatch.strmIn() >> strToCheck;
        tCIDLib::TBoolean retVal = bFileExists
        (
            strToCheck
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bFind")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        TString strItem;
        orbcToDispatch.strmIn() >> strItem;
        TFindBuf fndbToFill;
        tCIDLib::TBoolean retVal = bFind
        (
            strPath
          , strItem
          , fndbToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << fndbToFill;
    }
     else if (strMethodName == L"bFind2")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        TFindBuf fndbToFill;
        tCIDLib::TBoolean retVal = bFind2
        (
            strPath
          , fndbToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << fndbToFill;
    }
     else if (strMethodName == L"bIsDirectory")
    {
        TString strToCheck;
        orbcToDispatch.strmIn() >> strToCheck;
        tCIDLib::TBoolean retVal = bIsDirectory
        (
            strToCheck
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4QueryVolumes")
    {
        TKeyedHashSet<TVolumeInfo, TString, TStringKeyOps> colVols(29, TStringKeyOps(), &TVolumeInfo::strVolKey);
        TKeyedHashSet<TVolFailureInfo, TString, TStringKeyOps> colFails(29, TStringKeyOps(), &TVolFailureInfo::strVolKey);
        tCIDLib::TCard4 retVal = c4QueryVolumes
        (
            colVols
          , colFails
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colVols;
        orbcToDispatch.strmOut() << colFails;
    }
     else if (strMethodName == L"ReadFile")
    {
        TString strToRead;
        orbcToDispatch.strmIn() >> strToRead;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        ReadFile
        (
            strToRead
          , c4BufSz_mbufToFill
          , mbufToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"LoadFiles")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        TString strWildcard;
        orbcToDispatch.strmIn() >> strWildcard;
        TVector<TFindBuf> colSubDirs;
        TVector<TFindBuf> colFiles;
        LoadFiles
        (
            strPath
          , strWildcard
          , colSubDirs
          , colFiles
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << colSubDirs;
        orbcToDispatch.strmOut() << colFiles;
    }
     else if (strMethodName == L"MakeDirectory")
    {
        TString strBasePath;
        orbcToDispatch.strmIn() >> strBasePath;
        TString strNewDir;
        orbcToDispatch.strmIn() >> strNewDir;
        MakeDirectory
        (
            strBasePath
          , strNewDir
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"QueryHostName")
    {
        TString strToFill;
        QueryHostName
        (
            strToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << strToFill;
    }
     else if (strMethodName == L"RemoveSelected")
    {
        TString strToRemove;
        orbcToDispatch.strmIn() >> strToRemove;
        RemoveSelected
        (
            strToRemove
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"Rename")
    {
        TString strOrgName;
        orbcToDispatch.strmIn() >> strOrgName;
        TString strNewName;
        orbcToDispatch.strmIn() >> strNewName;
        tCIDLib::TBoolean bIsScope;
        orbcToDispatch.strmIn() >> bIsScope;
        Rename
        (
            strOrgName
          , strNewName
          , bIsScope
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

