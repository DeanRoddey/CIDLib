// ----------------------------------------------------------------------------
//  FILE: CIDNet_Shared.hpp
//  DATE: Fri, Feb 14 18:42:56 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCIDNet
{
    
    // ------------------------------------------------------------------------
    //  The built in authorization types for HTTP
    //                  
    // ------------------------------------------------------------------------
    enum class EHTTPAuthTypes
    {
        Basic
        , Digest
        , Count
        , Min = Basic
        , Max = Digest
    };
    CIDNETEXP EHTTPAuthTypes eXlatEHTTPAuthTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP const TString& strXlatEHTTPAuthTypes(const EHTTPAuthTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDNETEXP const TString& strLoadEHTTPAuthTypes(const EHTTPAuthTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const EHTTPAuthTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The types of authentication supported by the SMTP client class.
    //                  
    // ------------------------------------------------------------------------
    enum class EMailAuthTypes
    {
        None
        , SMTP
        , POPFirst
        , Count
        , Min = None
        , Max = POPFirst
    };
    CIDNETEXP EMailAuthTypes eXlatEMailAuthTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP const TString& strXlatEMailAuthTypes(const EMailAuthTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDNETEXP const TString& strLoadEMailAuthTypes(const EMailAuthTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const EMailAuthTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The types of authentication supported by the SMTP client class.
    //                  
    // ------------------------------------------------------------------------
    enum class EHTTPCodes
    {
        Unknown
        , Info
        , Success
        , Redirect
        , ClientErr
        , SrvErr
        , Count
        , Min = Unknown
        , Max = SrvErr
    };
    CIDNETEXP EHTTPCodes eXlatEHTTPCodes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP const TString& strXlatEHTTPCodes(const EHTTPCodes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDNETEXP const TString& strLoadEHTTPCodes(const EHTTPCodes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const EHTTPCodes eVal);

    
    // ------------------------------------------------------------------------
    //  The possible types of values in a JSON value node.
    //                  
    // ------------------------------------------------------------------------
    enum class EJSONVTypes
    {
        Array
        , False
        , Null
        , Number
        , Object
        , String
        , True
        , Count
        , Min = Array
        , Max = True
    };
    CIDNETEXP EJSONVTypes eXlatEJSONVTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP const TString& strXlatEJSONVTypes(const EJSONVTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDNETEXP const TString& strLoadEJSONVTypes(const EJSONVTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const EJSONVTypes eVal);

    
    // ------------------------------------------------------------------------
    //  Our CIDNet logging control flags.
    //                  
    // ------------------------------------------------------------------------
    enum class ELogFlags
    {
        CoreParser
        , HTTPClient
        , JSON
        , SMTP
        , XMLURLEntitySrc
        , Count
        , Min = CoreParser
        , Max = XMLURLEntitySrc
    };
    CIDNETEXP ELogFlags eXlatELogFlags(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP const TString& strXlatELogFlags(const ELogFlags eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDNETEXP const TString& strLoadELogFlags(const ELogFlags eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP const TString& strAltXlatELogFlags(const ELogFlags eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDNETEXP ELogFlags eAltXlatELogFlags(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const ELogFlags eVal);

    
    // ------------------------------------------------------------------------
    //  Values returned from the low level core parser msg reader
    //  
    //  THERE IS A method, THTTPClient::c4ReadResMsg, that maps these to
    //  status and texts. Update that if you change this!
    //                  
    // ------------------------------------------------------------------------
    enum class ENetPReadRes
    {
        Success
        , BadFirstLine
        , BadHdrLine
        , BadLineCont
        , BadProtoVer
        , BufTooSmall
        , ContLen
        , InvalidMsg
        , PartialMsg
        , Timeout
        , Count
        , Min = Success
        , Max = Timeout
    };
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const ENetPReadRes eVal);

    
    // ------------------------------------------------------------------------
    //  In some cases we have some code that might be used both from the client
    //  and the server side. So we need to indicate which end we are calling it
    //  from.
    //                  
    // ------------------------------------------------------------------------
    enum class EReadTypes
    {
        Client
        , Server
        , Count
        , Min = Client
        , Max = Server
    };
    CIDNETEXP tCIDLib::TBoolean bIsValidEnum(const EReadTypes eVal);

}

#pragma CIDLIB_POPPACK



CIDNETEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDNet::EHTTPCodes eToStream);



CIDNETEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDNet::ENetPReadRes eToStream);


