// ----------------------------------------------------------------------------
//  FILE: CIDSock_Shared.hpp
//  DATE: Fri, Feb 14 18:42:56 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCIDSock
{
    
    // ------------------------------------------------------------------------
    //  Our known supported internet protocols
    //                  
    // ------------------------------------------------------------------------
    enum class EProtos
    {
        None
        , File
        , HTTP
        , FTP
        , MailTo
        , News
        , HTTPS
        , RTSP
        , RTSPS
        , SIP
        , WS
        , WSS
        , Count
        , Min = None
        , Max = WSS
    };
    CIDSOCKEXP EProtos eXlatEProtos(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDSOCKEXP const TString& strXlatEProtos(const EProtos eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDSOCKEXP const TString& strAltXlatEProtos(const EProtos eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDSOCKEXP EProtos eAltXlatEProtos(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDSOCKEXP tCIDLib::TBoolean bIsValidEnum(const EProtos eVal);

    
    // ------------------------------------------------------------------------
    //  Flags for URL qualification
    //                  
    // ------------------------------------------------------------------------
    enum class EQualified
    {
        Partial
        , Full
        , DontCare
        , Count
        , Min = Partial
        , Max = DontCare
    };
    CIDSOCKEXP EQualified eXlatEQualified(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDSOCKEXP const TString& strXlatEQualified(const EQualified eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDSOCKEXP tCIDLib::TBoolean bIsValidEnum(const EQualified eVal);

    
    // ------------------------------------------------------------------------
    //  URL encoding/expansion flags
    //                  
    // ------------------------------------------------------------------------
    enum class EExpOpts
    {
        None
        , Encode
        , Expand
        , Count
        , Min = None
        , Max = Expand
    };
    CIDSOCKEXP EExpOpts eXlatEExpOpts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CIDSOCKEXP const TString& strXlatEExpOpts(const EExpOpts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CIDSOCKEXP tCIDLib::TBoolean bIsValidEnum(const EExpOpts eVal);

}

#pragma CIDLIB_POPPACK

CIDSOCKEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDSock::EProtos eToStream);
CIDSOCKEXP TBinInStream& operator>>(TBinInStream& strmSrc, tCIDSock::EProtos& eToFill);
CIDSOCKEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDSock::EProtos* const aeList, const tCIDLib::TCard4 c4Count);
CIDSOCKEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDSock::EProtos* const aeList, const tCIDLib::TCard4 c4Count);
CIDSOCKEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDSock::EProtos eToStream);

CIDSOCKEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDSock::EQualified eToStream);
CIDSOCKEXP TBinInStream& operator>>(TBinInStream& strmSrc, tCIDSock::EQualified& eToFill);
CIDSOCKEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDSock::EQualified* const aeList, const tCIDLib::TCard4 c4Count);
CIDSOCKEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDSock::EQualified* const aeList, const tCIDLib::TCard4 c4Count);
CIDSOCKEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDSock::EQualified eToStream);

CIDSOCKEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDSock::EExpOpts eToStream);
CIDSOCKEXP TBinInStream& operator>>(TBinInStream& strmSrc, tCIDSock::EExpOpts& eToFill);
CIDSOCKEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDSock::EExpOpts* const aeList, const tCIDLib::TCard4 c4Count);
CIDSOCKEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDSock::EExpOpts* const aeList, const tCIDLib::TCard4 c4Count);
CIDSOCKEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDSock::EExpOpts eToStream);

