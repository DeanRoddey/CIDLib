Class=[Final]
    ClassPath MEng.User.Tests.TestFileSystem;
    ParentClass MEng.Object;
EndClass;

Imports=
    MEng.System.Runtime.ConsoleOutStream;
    MEng.System.Runtime.DirIter;
    MEng.System.Runtime.FileSystem;
    MEng.User.Tests.TestHelpers;
EndImports;

Literals=
    String  kBasePath("\\FileTests\\DirIter");
EndLiterals;

Members=
    TestHelpers         m_Helper;
    ConsoleOutStream    m_Output;
    Int4                m_RetVal;
    Boolean             m_IsFile;
    Card8               m_Size;
    String              m_Name;
    DirIter             m_Iter;
    FileSystem          m_FileSys;
    FileSystem.PathList m_List;
    Card4               m_Count;
EndMembers;

Methods=[Public,Final]

    Constructor() :
        m_RetVal(0);
    Begin
    EndConstructor;


    Method Start() Returns Int4
    Begin
        //
        //  There are a few test files in the files area that we can
        //  use. They have names that should iterate in a given order
        //  and they have known sizes.
        //
        If (!m_FileSys.FileExists("\\FileTests\\DirIter\\A.File", True)
        ||  !m_FileSys.FileExists("\\FileTests\\DirIter\\B.File", True)
        ||  !m_FileSys.FileExists("\\FileTests\\DirIter\\C.File", True))
            m_Helper.PrintErr("Normal test files were not found", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // We should see the hidden one if we say normal only
        If (!m_FileSys.FileExists("\\FileTests\\DirIter\\Hidden.File", True))
            m_Helper.PrintErr("Hidden file should have been found", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // We should see it otherwise
        If (!m_FileSys.FileExists("\\FileTests\\DirIter\\Hidden.File", False))
            m_Helper.PrintErr("Hidden file should have been found", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Make sure we see normal directories
        If (!m_FileSys.DirExists(kBasePath, True))
            m_Helper.PrintErr("Normal dir should have been found", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // We'll see the hidden one even if asking for normal
        If (!m_FileSys.DirExists("\\FileTests\\DirIter\\HiddenDir", True))
            m_Helper.PrintErr("Hidden dir should have been found", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // And we see hidden directories if we want to
        If (!m_FileSys.DirExists("\\FileTests\\DirIter\\HiddenDir", False))
            m_Helper.PrintErr("Hidden dir should have been found", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Get a list of normal directories, which should return 2
        If (!m_FileSys.FindDirs(kBasePath, "*", True, m_List))
            m_Helper.PrintErr("FindDirs failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_List.GetElemCount() != 2)
            m_Helper.PrintErr("FindDirs returned wrong count", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_List[0] != "\\FileTests\\DirIter\\Dir1")
            m_Helper.PrintErr("FindDirs returned the wrong name", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  If we don't limit it to normal dirs, we should get 2. There is
        //  one hidden one.
        //
        If (!m_FileSys.FindDirs(kBasePath, "*", False, m_List))
            m_Helper.PrintErr("FindDirs failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_List.GetElemCount() != 2)
            m_Helper.PrintErr("FindDirs returned wrong count", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  Get a list of normal files, which should return 4. We shouldn't
        //  see the one marked with the system attribute, but we should se
        //  the three unhidden and the hidden one.
        //
        If (!m_FileSys.FindFiles(kBasePath, "*.File", True, m_List))
            m_Helper.PrintErr("FileFiles failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_List.GetElemCount() != 4)
            m_Helper.PrintErr("FileFiles returned wrong count", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // They should be sorted
        If ((m_List[0] != "\\FileTests\\DirIter\\A.File")
        ||  (m_List[1] != "\\FileTests\\DirIter\\B.File")
        ||  (m_List[2] != "\\FileTests\\DirIter\\C.File")
        ||  (m_List[3] != "\\FileTests\\DirIter\\Hidden.File"))
            m_Helper.PrintErr("FindFiles returned the wrong names", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  If we don't limit it to normal files, we should get five, since
        //  there is one system one.
        //
        If (!m_FileSys.FindFiles(kBasePath, "*.File", False, m_List))
            m_Helper.PrintErr("FindFiles failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_List.GetElemCount() != 5)
            m_Helper.PrintErr("FindFiles returned wrong count", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  Test the directory interation class. We should get one match
        //  in this search.
        //
        If (m_Iter.FindFirst(kBasePath, "A*", True, True, m_Name, m_Size, m_IsFile))
            m_Count := 0;
            DoLoop
                m_Count++;

                If ((m_Name = "\\FileTests\\DirIter\\A.File")
                &&  (m_Size != 16))
                    m_Helper.PrintErr("Got wrong file size in iteration", m_Output, $CurLine);
                    m_RetVal := -1;
                EndIf;
            DoWhile (m_Iter.FindNext(m_Name, m_Size, m_IsFile));

            If (m_Count != 1)
                m_Helper.PrintErr("Iterated too many files", m_Output, $CurLine);
                m_RetVal := -1;
            EndIf;
        Else
            m_Helper.PrintErr("FindFiles returned wrong count", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // This one should fail on the first try
        If (m_Iter.FindFirst(kBasePath, "Z*", True, True, m_Name, m_Size, m_IsFile))
            m_Helper.PrintErr("Got bogus success on FindFirst", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Output.Flush();
        Return m_RetVal;
    EndMethod;

EndMethods;

