Class=[Final]
    ClassPath MEng.User.Tests.TestInt2;
    ParentClass MEng.Object;
EndClass;

Imports=
    MEng.User.Tests.TestHelpers;
    MEng.System.Runtime.ConsoleOutStream;
EndImports;

Literals=
    Int2    kLitVal1(-1);
    Int2    kLitVal2(+33);
EndLiterals;

Members=
    ConsoleOutStream    m_Output;
    Int2                m_Test1;
    Int2                m_Test2;
    Int2                m_Test3;
    Int4                m_RetVal;
    TestHelpers         m_Helper;
    String              m_TmpStr;
EndMembers;

Methods=[Public,Final]

    Constructor() :
        m_Output();
        m_Test1();
        m_Test2(10);
        m_Test3(-1);
        m_RetVal(0);
    Begin
    EndConstructor;

    Method Start() Returns Int4
    Begin
        // Check that the initializers set the values correctly
        If (m_Test1 != 0)
            m_Helper.PrintErr("Initial m_Test1 value was incorrect", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_Test2 != 10)
            m_Helper.PrintErr("Initial m_Test2 value was incorrect", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_Test3 != -1)
            m_Helper.PrintErr("Initial m_Test3 value was incorrect", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Make sure the literals work
        If ((kLitVal1 != -1) && (kLitVal2 != 33))
            m_Helper.PrintErr("Literals were not correctly set", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Do some basic checks of equality and relative magnitude tests
        If (m_Test1 = m_Test2)
            m_Helper.PrintErr("Invalid equality reported", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (!(m_Test1 < m_Test2))
            m_Helper.PrintErr("Invalid < reported", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (!(m_Test3 < m_Test1))
            m_Helper.PrintErr("Invalid < reported", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_Test1 > m_Test2)
            m_Helper.PrintErr("Invalid > reported", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_Test3 > m_Test1)
            m_Helper.PrintErr("Invalid > reported", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Make sure that a copy results in equal objects
        m_Test1 := m_Test2;
        If (m_Test1 != m_Test2)
            m_Helper.PrintErr("Objects not equal after assign", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        If (m_Test1 > m_Test2)
            m_Helper.PrintErr("Objects not equal after assign", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Test negation and absolute value
        m_Test1 := -10;
        If (m_Test1.AbsValue() != 10)
            m_Helper.PrintErr("AbsValue failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1.Negate();
        If (m_Test1 != 10)
            m_Helper.PrintErr("Negate failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Test the mul/div methods
        m_Test1 := 20;
        m_Test1 *= 2;
        If (m_Test1 != 40)
            m_Helper.PrintErr("MulEq failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test2 := m_Test1 * 2;
        If (m_Test2 != 80)
            m_Helper.PrintErr("Mul failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := m_Test2 / 4;
        If (m_Test1 != 20)
            m_Helper.PrintErr("Div failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 /= 2;
        If (m_Test1 != 10)
            m_Helper.PrintErr("DivEq failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := 10;
        m_Test1 %= 3;
        If (m_Test1 != 1)
            m_Helper.PrintErr("ModDivEq failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := 15;
        m_Test2 := m_Test1 % 4;
        If (m_Test2 != 3)
            m_Helper.PrintErr("ModDiv failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Test the add/sub methods
        m_Test1 := 20;
        m_Test1 += 2;
        If (m_Test1 != 22)
            m_Helper.PrintErr("PlusEq failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test2 := m_Test1 + 4;
        If (m_Test2 != 26)
            m_Helper.PrintErr("Plus failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := m_Test2 - 8;
        If (m_Test1 != 18)
            m_Helper.PrintErr("Minus failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 -= 4;
        If (m_Test1 != 14)
            m_Helper.PrintErr("MinusEq failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Test some suffix stuff
        m_Test1 := 102#I2;
        If (m_Test1 != 102)
            m_Helper.PrintErr("Suffix assign failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := 0x7F#I2;
        If (m_Test1 != 0x7F)
            m_Helper.PrintErr("Suffix assign failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Should automatically convert
        m_Test1 := 0x0#C2;
        If (m_Test1 != 0)
            m_Helper.PrintErr("Suffix assign failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := 0#I1;
        If (m_Test1 != 0)
            m_Helper.PrintErr("Suffix assign failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := -022#I1;
        If (m_Test1 != -18)
            m_Helper.PrintErr("Suffix assign failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Should convert automatically since it will fit the target
        m_Test1 := -0x77F#I4;
        If (m_Test1 != -0x77F)
            m_Helper.PrintErr("Suffix assign failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Test min/max methods
        m_Test1 := -10;
        If ((m_Test1.MaxVal(11) != 11)
        ||  (m_Test1.MinVal(11) != -10))
            m_Helper.PrintErr("Min/max failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Test formatting values
        m_TmpStr.Clear();
        m_Test1 := -685;
        m_TmpStr.AppendInt2(m_Test1, Radices.Dec);
        If (m_TmpStr != "-685")
            m_Helper.PrintErr("Formatted append failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Test1 := 431;
        m_TmpStr.AppendInt2(m_Test1, Radices.Dec);
        If (m_TmpStr != "-685431")
            m_Helper.PrintErr("Formatted append failed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        m_Output.Flush();
        Return m_RetVal;
    EndMethod;

EndMethods;


