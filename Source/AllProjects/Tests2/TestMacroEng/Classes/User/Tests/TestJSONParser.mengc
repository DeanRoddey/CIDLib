Class=[Final]
    ClassPath MEng.User.Tests.TestJSONParser;
    ParentClass MEng.Object;
EndClass;

Imports=
    MEng.User.Tests.TestHelpers;
    MEng.System.Runtime.ConsoleOutStream;
    MEng.System.Runtime.FileInStream;
    MEng.System.Runtime.MemBuf;
    MEng.System.Runtime.JSONParser;
    MEng.System.Runtime.JSONAnchor;
EndImports;

Members=
    TestHelpers         m_Helper;
    ConsoleOutStream    m_Output;
    Int4                m_RetVal;
    JSONParser          m_Parser;
EndMembers;

Methods=[Private,Final]

    // Check the name and child/attribute counts of a node
    Method BasicTests(  [In]    JSONAnchor  ToTest
                        , [In]  String      ExpName
                        , [In]  Card4       ChildCnt) Returns Boolean
    Begin
        Locals=
            Boolean Ret(True);
            String  Err;
            String  Name;
        EndLocals;

        // Check the node name
        Name := m_Parser.GetName(ToTest);
        If (Name != ExpName)
            Err := "Expected node name '";
            Err.Append(ExpName);
            Err.Append("' but got '");
            Err.Append(Name);
            Err.Append("'");
            m_Helper.PrintErr(Err, m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // And check the child value count
        If (m_Parser.GetChildCount(ToTest) != ChildCnt)
            Err := "The child count is wrong for ";
            Err.Append(Name);
            m_Helper.PrintErr(Err, m_Output, $CurLine);
            Ret := False;
        EndIf;

        Return Ret;
    EndMethod;


    Method TestSubElem([In] JSONAnchor SubElem)
    Begin
        Locals=
            JSONAnchor  Child1;
            JSONAnchor  Child2;
            JSONAnchor  Child3;
            Boolean     GotExcept;
            Card4       FndAt;
        EndLocals;

        // Check the counts and name
        If (!BasicTests(SubElem, "SubElem1", 3))
            m_RetVal := -1;
            Return;
        EndIf;

        // Get the values via name lookup
        m_Parser.FindChild(SubElem, 0, "Attr1", FndAt, Child1);
        m_Parser.FindChild(SubElem, 0, "Attr2", FndAt, Child2);
        m_Parser.FindChild(SubElem, 0, "Attr3", FndAt, Child3);

        // Check the values
        If ((m_Parser.GetValue(Child1) != "11")
        ||  (m_Parser.GetValue(Child2) != "12")
        ||  (m_Parser.GetValue(Child3) != "13"))
            m_Helper.PrintErr("SubElem1 values are wrong", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Get them by index and check the names
        m_Parser.GetChildAt(SubElem, 0, Child1);
        m_Parser.GetChildAt(SubElem, 1, Child2);
        m_Parser.GetChildAt(SubElem, 2, Child3);

        If ((m_Parser.GetName(Child1) != "Attr1")
        ||  (m_Parser.GetName(Child2) != "Attr2")
        ||  (m_Parser.GetName(Child3) != "Attr3"))
            m_Helper.PrintErr("SubElem1 names by index are wrong", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Double check the values
        If ((m_Parser.GetValue(Child1) != "11")
        ||  (m_Parser.GetValue(Child2) != "12")
        ||  (m_Parser.GetValue(Child3) != "13"))
            m_Helper.PrintErr("SubElem1 values by index are wrong", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Make sure we get an exception if we use a bad attribute index
        GotExcept := False;
        Try
            m_Parser.GetChildAt(SubElem, 3, Child1);
        EndTry;

        Catch
            GotExcept := True;
        EndCatch;

        If (!GotExcept)
            m_Helper.PrintErr("Failed to catch invalid attribute index", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

    EndMethod;


    Method TestElem1([In] JSONAnchor Child)
    Begin
        Locals=
            JSONAnchor  SubElem;
        EndLocals;

        // Check the counts and name
        If (!BasicTests(Child, "Elem1", 3))
            m_RetVal := -1;
            Return;
        EndIf;

        // Check our first two (simple) values
        If ((m_Parser.GetValueAt(Child, 0) != "1")
        ||  (m_Parser.GetValueAt(Child, 1) != "2"))
            m_Helper.PrintErr("Elem1 values are wrong", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Get our one child node and check it
        m_Parser.GetChildAt(Child, 2, SubElem);
        TestSubElem(SubElem);
    EndMethod;


    Method TestElem2([In] JSONAnchor Child)
    Begin
        // Check the counts and name
        If (!BasicTests(Child, "Elem2", 2))
            m_RetVal := -1;
            Return;
        EndIf;

        // Check the two simple child values
        If ((m_Parser.GetValueAt(Child, 0) != "21")
        ||  (m_Parser.GetValueAt(Child, 1) != "22"))
            m_Helper.PrintErr("Elem2 attributes are wrong", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

    EndMethod;

    Method TestElem3([In] JSONAnchor Child)
    Begin
        Locals=
            JSONAnchor  ValAnchor;
            Card4       FndAt;
        EndLocals;

        // Check the counts and name
        If (!BasicTests(Child, "Elem3", 1))
            m_RetVal := -1;
            Return;
        EndIf;

        // Check our one value by getting the node by name
        m_Parser.FindChild(Child, 0, "Attr31", FndAt, ValAnchor);

        If (m_Parser.GetValue(ValAnchor) != "\t\r\n\\\"'\v")
            m_Helper.PrintErr("Elem3 attributes are wrong", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

    EndMethod;


    //
    //  We use this one to test iteration stuff. We get the array that is
    //  the value of the element. We also test out all of the simple values
    //  to make sur etha tthey work.
    //
    Method TestElem4([In] JSONAnchor Child)
    Begin
        Locals=
            JSONAnchor      ValAnchor;
            Card4           Index;
            JSONValTypes    Type;
        EndLocals;

        // Check the counts and name
        If (!BasicTests(Child, "Elem4", 5))
            m_RetVal := -1;
            Return;
        EndIf;

        If (!m_Parser.GetFirstChild(Child, ValAnchor))
            m_Helper.PrintErr("Didn't get first child", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        Index := 0;
        DoLoop
            Type := m_Parser.GetType(ValAnchor);
            Switch(Index)
                Case 0 :
                    If (Type != JSONValTypes.Number)
                        m_Helper.PrintErr("Expected number value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 1 :
                    If (Type != JSONValTypes.Null)
                        m_Helper.PrintErr("Expected null value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 2 :
                    If (Type != JSONValTypes.True)
                        m_Helper.PrintErr("Expected true value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 3 :
                    If (Type != JSONValTypes.False)
                        m_Helper.PrintErr("Expected false value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 4 :
                    If (Type != JSONValTypes.String)
                        m_Helper.PrintErr("Expected string value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Default :
                EndCase;
            EndSwitch;

            Index++;
        DoWhile (m_Parser.NextPrevChild(Child, True, ValAnchor));

        // Do the same thing going backwards from the last one
        If (!m_Parser.GetLastChild(Child, ValAnchor))
            m_Helper.PrintErr("Didn't get last child", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        Index := m_Parser.GetChildCount(Child) - 1;
        DoLoop
            Type := m_Parser.GetType(ValAnchor);
            Switch(Index)
                Case 0 :
                    If (Type != JSONValTypes.Number)
                        m_Helper.PrintErr("Expected number value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 1 :
                    If (Type != JSONValTypes.Null)
                        m_Helper.PrintErr("Expected null value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 2 :
                    If (Type != JSONValTypes.True)
                        m_Helper.PrintErr("Expected true value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 3 :
                    If (Type != JSONValTypes.False)
                        m_Helper.PrintErr("Expected false value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Case 4 :
                    If (Type != JSONValTypes.String)
                        m_Helper.PrintErr("Expected string value", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndIf;
                EndCase;

                Default :
                EndCase;
            EndSwitch;

            Index--;
        DoWhile (m_Parser.NextPrevChild(Child, False, ValAnchor));

    EndMethod;


    // We get the array, the value of Thermos
    Method TestThermos([In] JSONAnchor ThermoList)
    Begin
        Locals=
            JSONAnchor  Thermo;
            JSONAnchor  Events;
            String      Value;
            Card4       FndAt;
        EndLocals;

        If (!BasicTests(ThermoList, "Thermos", 1))
            m_RetVal := -1;
            Return;
        EndIf;

        // Get the one child thermo. It has two values
        m_Parser.GetChildAt(ThermoList, 0, Thermo);
        If (!BasicTests(Thermo, "", 2))
            m_RetVal := -1;
            Return;
        EndIf;

        // Check values
        If ((m_Parser.GetNameAt(Thermo, 0) != "name")
        ||  (m_Parser.GetValueAt(Thermo, 0) != "Thermo1"))
            m_Helper.PrintErr("name value is incorrect", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        // Get the event list child of the thermo. Should have 5 values
        m_Parser.GetChildAt(Thermo, 1, Events);
        If (!BasicTests(Events, "Events", 5))
            m_RetVal := -1;
            Return;
        EndIf;

        // These values are not named. Check a couple of them
        If ((m_Parser.GetValueAt(Events, 0) != "VacationTest")
        ||  (m_Parser.GetValueAt(Events, 4) != "17:00:00"))
            m_Helper.PrintErr("Event values are incorrect", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

    EndMethod;


    Method TestRoot([In] JSONAnchor Root)
    Begin
        Locals=
            JSONAnchor  Child;
        EndLocals;

        // Check the counts and name
        If (!BasicTests(Root, "", 7))
            m_RetVal := -1;
            Return;
        EndIf;

        // We should have five child elements, check them
        m_Parser.GetChildAt(Root, 0, Child);
        TestElem1(Child);

        m_Parser.GetChildAt(Root, 1, Child);
        TestElem2(Child);

        m_Parser.GetChildAt(Root, 2, Child);
        TestElem3(Child);

        // Get the array value of Thermos and pass that in
        m_Parser.GetChildAt(Root, 3, Child);
        TestThermos(Child);

        m_Parser.GetChildAt(Root, 4, Child);
        TestElem4(Child);

    EndMethod;

EndMethods;


Methods=[Public,Final]

    Constructor() :
        m_RetVal(0);
    Begin
    EndConstructor;


    //
    //  Just invokes all the local tests
    //
    Method Start() Returns Int4
    Begin
        Locals=
            FileInStream    SrcStream;
            JSONAnchor      Root;
            JSONAnchor      UnInit;
            JSONAnchor      Child;
            Boolean         GotExcept;
        EndLocals;

        // For our purposes, we'll use a file with a canned response
        SrcStream.Open("\\JSON\\JSONSrc1.Txt");
        m_Parser.ParseResponse(SrcStream);

        // Get the root anchor
        m_Parser.GetRootAnchor(Root);


        //
        //  Test some of the specialty methods that will find specific types
        //  of child nodes by name. These will be used a good bit in the
        //  content iteration tests, so we want to make sure they basically
        //  work.
        //
        //  First do positive tests of each.
        //
        Try
            m_Parser.FindArray(Root, "Elem4", Child, True);
            If (m_Parser.GetName(Child) != "Elem4")
                m_RetVal := -1;
                m_Helper.PrintErr("FindArray returned wrong node", m_Output, $CurLine);
            EndIf;
        EndTry;

        Catch
            m_RetVal := -1;
            m_Helper.PrintErr("FindArray failed", m_Output, $CurLine);
        EndCatch;

        Try
            m_Parser.FindObject(Root, "Elem2", Child, True);
            If (m_Parser.GetName(Child) != "Elem2")
                m_RetVal := -1;
                m_Helper.PrintErr("FindObject returned wrong node", m_Output, $CurLine);
            EndIf;
        EndTry;

        Catch
            m_RetVal := -1;
            m_Helper.PrintErr("Findobject failed", m_Output, $CurLine);
        EndCatch;

        Try
            If (m_Parser.FindValue(Root, "Elem6", True) != "12.3")
                m_RetVal := -1;
                m_Helper.PrintErr("FindValue returned wrong value", m_Output, $CurLine);
            EndIf;
        EndTry;

        Catch
            m_RetVal := -1;
            m_Helper.PrintErr("FindValue failed", m_Output, $CurLine);
        EndCatch;


        //
        //  Now do negative tests in the non-exception throwign mode.
        //
        Try
            If (m_Parser.FindObject(Root, "NotARealName", Child, False))
                m_RetVal := -1;
                m_Helper.PrintErr("FindObject should have failed", m_Output, $CurLine);
            EndIf;
        EndTry;

        Catch
            m_RetVal := -1;
            m_Helper.PrintErr("FindObject shouldn't have thrown", m_Output, $CurLine);
        EndCatch;

        Try
            If (m_Parser.FindArray(Root, "NotARealName", Child, False))
                m_RetVal := -1;
                m_Helper.PrintErr("FindArray should have failed", m_Output, $CurLine);
            EndIf;
        EndTry;

        Catch
            m_RetVal := -1;
            m_Helper.PrintErr("FindArray shouldn't have thrown", m_Output, $CurLine);
        EndCatch;

        Try
            If (m_Parser.FindValue(Root, "NotARealName", False) != "")
                m_RetVal := -1;
                m_Helper.PrintErr("FindValue should have returned emptys tring", m_Output, $CurLine);
            EndIf;
        EndTry;

        Catch
            m_RetVal := -1;
            m_Helper.PrintErr("FindValue shouldn't have thrown", m_Output, $CurLine);
        EndCatch;


        //
        //  Now do negative tests in exception throwing mode. In this case,
        //  we'll look for existing values, but of the wrong type.
        //
        Try
            GotExcept := False;
            m_Parser.FindObject(Root, "Elem4", Child, True);
        EndTry;

        Catch
            GotExcept := True;
        EndCatch;

        If (!GotExcept)
            m_RetVal := -1;
            m_Helper.PrintErr("FindObject should have thrown", m_Output, $CurLine);
        EndIf;

        Try
            GotExcept := False;
            m_Parser.FindArray(Root, "Elem2", Child, True);
        EndTry;

        Catch
            GotExcept := True;
        EndCatch;

        If (!GotExcept)
            m_RetVal := -1;
            m_Helper.PrintErr("FindArray should have thrown", m_Output, $CurLine);
        EndIf;

        Try
            GotExcept := False;
            m_Parser.FindValue(Root, "Elem2", True);
        EndTry;

        Catch
            GotExcept := True;
        EndCatch;

        If (!GotExcept)
            m_RetVal := -1;
            m_Helper.PrintErr("FindValue should have thrown", m_Output, $CurLine);
        EndIf;

        // Test the getting of a type by name
        If (m_Parser.FindType(Root, "Elem2") != JSONValTypes.Object)
            m_RetVal := -1;
            m_Helper.PrintErr("FindType failed", m_Output, $CurLine);
        EndIf;

        If (m_Parser.FindType(Root, "Elem5") != JSONValTypes.Array)
            m_RetVal := -1;
            m_Helper.PrintErr("FindType failed", m_Output, $CurLine);
        EndIf;

        If (m_Parser.FindType(Root, "Elem6") != JSONValTypes.Number)
            m_RetVal := -1;
            m_Helper.PrintErr("FindType failed", m_Output, $CurLine);
        EndIf;


        //
        //  Now run the content iteration tests to make sure we can move around
        //  through the nodes and find everything.
        //
        TestRoot(Root);


        //
        //  Make sure we catch an out of date anchor. So parse the file
        //  again, and reuse the same root anchor without updating it.
        //
        m_Parser.ParseResponse(SrcStream);
        Try
            m_Parser.GetName(Root);
        EndTry;

        Catch
            If (!$Exception.Check(JSONParserErrs.BadAnchor))
                m_RetVal := -1;
                m_Helper.PrintErr("Failed to catch invalid anchor", m_Output, $CurLine);
            EndIf;
        EndCatch;

        // Do the same for an unitialized anchor
        Try
            m_Parser.GetName(UnInit);
        EndTry;

        Catch
            If (!$Exception.Check(JSONParserErrs.BadAnchor))
                m_RetVal := -1;
                m_Helper.PrintErr("Failed to catch unitialized anchor", m_Output, $CurLine);
            EndIf;
        EndCatch;

        m_Output.Flush();
        Return m_RetVal;
    EndMethod;

EndMethods;


