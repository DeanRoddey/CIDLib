Class=[Final]
    ClassPath MEng.User.Tests.TestException1;
    ParentClass MEng.Object;
EndClass;

Imports=
    MEng.User.Tests.TestHelpers;
    MEng.System.Runtime.ConsoleOutStream;
EndImports;

Types=
    Enum=TestErrors
        Error1 : "The fraculator failed";
        Error2 : "The psycho-fraculator failed";
        Error3 : "The value is { %(1), %(2) }";
    EndEnum;
EndTypes;

Members=
    Boolean             m_Flag;
    ConsoleOutStream    m_Output;
    Card4               m_Counter;
    Int4                m_RetVal;
    TestHelpers         m_Helper;
EndMembers;

Methods=[Public,Final]

    Constructor() :
        m_RetVal(0);
    Begin
    EndConstructor;


    // Just throws an exception to test stack unwind
    Method TestThrow()
    Begin
        Throw(TestErrors.Error1);
    EndMethod;


    //
    //  Makes sure that, if we return out of try blocks, that they get cleaned
    //  up. If they don't, this will cause an exception when our caller tries
    //  to get the return value out, since it won't be where it is supposed
    //  to be.
    //
    Method TestTryRet() Returns Boolean
    Begin
        Try
            Try
                Return True;
            EndTry;

            Catch
            EndCatch;
        EndTry;

        Catch
        EndCatch;

        Return False;
    EndMethod;


    Method Start() Returns Int4
    Begin

        // Call the method that makes sure returns out of a try work
        m_Flag := TestTryRet();

        //
        //  Do a simple test to make sure that the throw vectors to the
        //  Catch block, and that the catch block is run.
        //
        m_Flag := False;
        Try
            Throw(TestErrors.Error1);
            m_Helper.PrintErr("Saw code after throw", m_Output, $CurLine);
            m_RetVal := -1;
        EndTry;

        Catch
            m_Flag := True;
        EndCatch;

        If (!m_Flag)
            m_Helper.PrintErr("Catch block not executed", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  Do another one in which we check that we got the specific
        //  exception that we threw.
        //
        m_Flag := False;
        Try
            Throw(TestErrors.Error2);
            m_Helper.PrintErr("Saw code after throw", m_Output, $CurLine);
            m_RetVal := -1;
        EndTry;

        Catch
            If ($Exception.Check(TestErrors.Error2))
                m_Flag := True;
            EndIf;
        EndCatch;

        If (!m_Flag)
            m_Helper.PrintErr("Expected exception not seen", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  Do another one that calls a method that throws an exception back
        //  to us.
        //
        m_Flag := False;
        Try
            This.TestThrow();
            m_Helper.PrintErr("Saw code after throw", m_Output, $CurLine);
            m_RetVal := -1;
        EndTry;

        Catch
            If ($Exception.Check(TestErrors.Error1))
                m_Flag := True;
            EndIf;
        EndCatch;

        If (!m_Flag)
            m_Helper.PrintErr("Expected exception not seen", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        //
        //  And do a multiply block nested set of try/catch blocks, to make
        //  sure that we can correctly rethrow out of an inner block.
        //
        m_Flag := False;
        m_Counter := 0;
        If (!m_Flag)
            Try
                If (True)
                    Try
                        Throw(TestErrors.Error1);
                        m_Helper.PrintErr("Saw code after throw", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndTry;

                    Catch
                        // If we got what we expected, bump the counter
                        If ($Exception.Check(TestErrors.Error1))
                            m_Counter++;
                        EndIf;

                        // And rethrow the current exception
                        Rethrow;

                        m_Helper.PrintErr("Saw code after rethrow", m_Output, $CurLine);
                        m_RetVal := -1;
                    EndCatch;
                EndIf;
            EndTry;

            Catch
                If ($Exception.Check(TestErrors.Error1))
                    m_Counter++;
                EndIf;
            EndCatch;
        EndIf;

        If (m_Counter != 2)
            m_Helper.PrintErr("Did not get both exceptions", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;


        //
        //  Do one that uses the formatting scheme
        //
        m_Flag := False;
        m_Counter := 59;
        Try
            Throw(TestErrors.Error3, m_Flag, m_Counter);
            m_Helper.PrintErr("Saw code after throw", m_Output, $CurLine);
            m_RetVal := -1;
        EndTry;

        Catch
            If ($Exception.Check(TestErrors.Error3))
                If ($Exception.GetErrorText() != "The value is { False, 59 }")
                    m_Helper.PrintErr("Error text format not correct", m_Output, $CurLine);
                    m_RetVal := -1;
                EndIf;
                m_Flag := True;
            EndIf;
        EndCatch;

        If (!m_Flag)
            m_Helper.PrintErr("Expected exception not seen", m_Output, $CurLine);
            m_RetVal := -1;
        EndIf;

        Return m_RetVal;
    EndMethod;

EndMethods;


