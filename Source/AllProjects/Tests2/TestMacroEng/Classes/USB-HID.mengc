//
//  This class demonstrates the use of the USB HID support class. HID type
//  USB devices have simple APIs composed of fixed size buffers that you can
//  read and write. In this case, we are interfacing to a SmartHome 1132U,
//  which is a USB based X-10 controller. It has a 9 byte transfer buffer
//  size, so we set up a memory buffer of 9 bytes for reading and writing
//  data.
//
Class=[NonFinal]
    ClassPath MEng.USB-HID;
    ParentClass MEng.Object;
EndClass;

Imports=
    MEng.System.Runtime.MemBuf;
    MEng.System.Runtime.USBHID;
    MEng.System.Runtime.ConsoleOutStream;
EndImports;

Literals=
    Card2   kVendorId(0x10BF);
    Card2   kProductId(0x0001);
EndLiterals;

Members=
    USBHID              m_USB;
    MemBuf              m_IOBuf;
    ConsoleOutStream    m_Con;
    String              m_Path;
    Time                m_Time;
EndMembers;

Methods=[Private,Final]

    //
    //  Helpers that set up the transfer buffer for a message of a given size. It
    //  sets the other bytes to zero. The bytes go into the 1, 2, etc... indices,
    //  with the 0th byte being zero.
    //
    Method Init2Byte([In] Card1 Byte1, [In] Card1 Byte2)
    Begin
        m_IOBuf.SetAll(0);
        m_IOBuf.PutCard1At(1, Byte1);
        m_IOBuf.PutCard1At(2, Byte2);
    EndMethod;

    Method Init3Byte([In] Card1 Byte1, [In] Card1 Byte2, [In] Card1 Byte3)
    Begin
        m_IOBuf.SetAll(0);
        m_IOBuf.PutCard1At(1, Byte1);
        m_IOBuf.PutCard1At(2, Byte2);
        m_IOBuf.PutCard1At(3, Byte3);
    EndMethod;

    //
    //  Checks the status of the device. Leaves reply in buffer. Returns True
    //  if it got the status, else False.
    //
    Method CheckStatus() Returns Boolean
    Begin
        Locals=
            Card8   CurTime;
            Card8   EndTime;
        EndLocals;

        // Send it a query message and wait for a reply
        Init2Byte(0x20, 0x08);
        m_USB.Write(m_IOBuf, 9, 50);

        // Wait for up to a second, tossing non-status replies
        CurTime := m_Time.GetCurStamp();
        EndTime := CurTime + 1000;
        While (CurTime < EndTime)
            //
            //  Tell it not to throw (last parm), so it will return True
            //  if it read a packet, else False.
            //
            If (m_USB.Read(m_IOBuf, 9, 100, False))
                If ((m_IOBuf.GetCard1At(1) & 0xC0) = 0x80)
                    Return True;
                EndIf;
            EndIf;
            CurTime := m_Time.GetCurStamp();
        EndWhile;
        Return False;
    EndMethod;

EndMethods;


Methods=[Public,Final]

    Constructor() :
        m_IOBuf(9, 9);
    Begin
    EndConstructor;


    //
    //  Macro entry point. Just checks for the precense of the device and
    //  does a few operations on it.
    //
    Method Start() Returns Int4
    Begin
        m_Con.FmtStr("CML USB-HID demo\n");
        m_Con.Flush();

        //
        //  First just see if the device is present. If so, display the device
        //  path, else display an error and exit.
        //
        If (!m_USB.FindDevice(kVendorId, kProductId, m_Path))
            m_Con.FmtStr("The device was not present");
            m_Con.Flush();
            Return 1;
        EndIf;

        m_Con.FmtStr("Device is present.\nPath=");
        m_Con.FmtStr(m_Path);
        m_Con.DNewLn();
        m_Con.Flush();

        // Looks like hes' there, so open the device
        m_USB.Open(kVendorId, kProductId);

        //
        //  Initialize the device by sending some setup commands. We don't
        //  ask for permissio to send these type messages.
        //
        Init2Byte(0x20, 0x21);
        m_USB.Write(m_IOBuf, 9, 2000);
        m_Time.Sleep(50);

        Init2Byte(0x20, 0x22);
        m_USB.Write(m_IOBuf, 9, 2000);
        m_Time.Sleep(50);

        Init3Byte(0x20, 0x04, 0x20);
        m_USB.Write(m_IOBuf, 9, 2000);
        m_Time.Sleep(50);

        Init3Byte(0x20, 0x02, 0x2);
        m_USB.Write(m_IOBuf, 9, 2000);
        m_Time.Sleep(100);

        If (CheckStatus())
            If ((m_IOBuf.GetCard1At(2) & 0x1) = 0)
                m_Con.FmtStr("The device is not powered on");
            Else
                m_Con.FmtStr("Device is powered on");
            EndIf;
        Else
            // Couldn't get the status, so report that
            m_Con.FmtStr("Could not get status of controller");
            m_Con.DNewLn();
        EndIf;
        m_Con.Flush();

        Return 0;
    EndMethod;

EndMethods;
