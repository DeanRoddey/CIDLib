// ----------------------------------------------------------------------------
//  FILE: CIDCtrls_Shared.hpp
//  DATE: Sat, May 01 11:54:19 2021 -0400
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kCIDCtrls
{
    
    // ------------------------------------------------------------------------
    //  The values that are used in the resource files to indicate dialog
    //  flags being enabled.
    //                  
    // ------------------------------------------------------------------------
    CIDCTRLSEXP const extern TString strDlgFlag_Sizeable;
    CIDCTRLSEXP const extern TString strDlgFlag_ScreenOrigin;
    CIDCTRLSEXP const extern TString strDlgFlag_SetFgn;
    CIDCTRLSEXP const extern TString strDlgFlag_UseOrigin;
    
    // ------------------------------------------------------------------------
    //  The values that are used in the resource files to indicate dlg
    //  item flags being enabled.
    //                  
    // ------------------------------------------------------------------------
    CIDCTRLSEXP const extern TString strDlgItemFlag_InitFocus;
    CIDCTRLSEXP const extern TString strDlgItemFlag_Disabled;
    
    // ------------------------------------------------------------------------
    //  The dialog item hint strings we use, to keep from having literal
    //  strings all over the place.
    //                  
    // ------------------------------------------------------------------------
    CIDCTRLSEXP const extern TString strHint_Animate;
    CIDCTRLSEXP const extern TString strHint_AutoAll;
    CIDCTRLSEXP const extern TString strHint_AutoLast;
    CIDCTRLSEXP const extern TString strHint_AutoScroll;
    CIDCTRLSEXP const extern TString strHint_AutoSort;
    CIDCTRLSEXP const extern TString strHint_AutoTicks;
    CIDCTRLSEXP const extern TString strHint_Border;
    CIDCTRLSEXP const extern TString strHint_Center;
    CIDCTRLSEXP const extern TString strHint_EndEllipsis;
    CIDCTRLSEXP const extern TString strHint_CheckBox;
    CIDCTRLSEXP const extern TString strHint_ColSort;
    CIDCTRLSEXP const extern TString strHint_CurValue;
    CIDCTRLSEXP const extern TString strHint_DefButton;
    CIDCTRLSEXP const extern TString strHint_EmphVal;
    CIDCTRLSEXP const extern TString strHint_FinePrint;
    CIDCTRLSEXP const extern TString strHint_FixedFirst;
    CIDCTRLSEXP const extern TString strHint_Grid;
    CIDCTRLSEXP const extern TString strHint_Group;
    CIDCTRLSEXP const extern TString strHint_HorzScroll;
    CIDCTRLSEXP const extern TString strHint_Instruct;
    CIDCTRLSEXP const extern TString strHint_Invoke;
    CIDCTRLSEXP const extern TString strHint_Label;
    CIDCTRLSEXP const extern TString strHint_LeftSide;
    CIDCTRLSEXP const extern TString strHint_LiveTrack;
    CIDCTRLSEXP const extern TString strHint_MultiVal;
    CIDCTRLSEXP const extern TString strHint_NoAutoCheck;
    CIDCTRLSEXP const extern TString strHint_NoBorder;
    CIDCTRLSEXP const extern TString strHint_NoTitles;
    CIDCTRLSEXP const extern TString strHint_Number;
    CIDCTRLSEXP const extern TString strHint_ParentMenu;
    CIDCTRLSEXP const extern TString strHint_Password;
    CIDCTRLSEXP const extern TString strHint_Prefix;
    CIDCTRLSEXP const extern TString strHint_ReadOnly;
    CIDCTRLSEXP const extern TString strHint_ReportChanges;
    CIDCTRLSEXP const extern TString strHint_ReportClicks;
    CIDCTRLSEXP const extern TString strHint_SourceCode;
    CIDCTRLSEXP const extern TString strHint_Sort;
    CIDCTRLSEXP const extern TString strHint_Ticks;
    CIDCTRLSEXP const extern TString strHint_TopLevel;
    CIDCTRLSEXP const extern TString strHint_Title;
    CIDCTRLSEXP const extern TString strHint_Transparent;
    CIDCTRLSEXP const extern TString strHint_TwoLine;
    CIDCTRLSEXP const extern TString strHint_Vertical;
    CIDCTRLSEXP const extern TString strHint_VertScroll;
    CIDCTRLSEXP const extern TString strHint_WantEnter;
    CIDCTRLSEXP const extern TString strHint_Wrap;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCIDCtrls
{
    
    // ------------------------------------------------------------------------
    //  The calendar widget specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class ECalStyles : tCIDLib::TCard4
    {
        SizeTo = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ECalStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ECalStyles operator|(const tCIDCtrls::ECalStyles eLHS, const tCIDCtrls::ECalStyles eRHS)
    {    
        return tCIDCtrls::ECalStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ECalStyles& operator|=(tCIDCtrls::ECalStyles& eLHS, const tCIDCtrls::ECalStyles eRHS)
    {    
        eLHS = tCIDCtrls::ECalStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ECalStyles operator&(const tCIDCtrls::ECalStyles eLHS, const tCIDCtrls::ECalStyles eRHS)
    {    
        return tCIDCtrls::ECalStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ECalStyles& operator&=(tCIDCtrls::ECalStyles& eLHS, const tCIDCtrls::ECalStyles eRHS)
    {    
        eLHS = tCIDCtrls::ECalStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  The calendar widget specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class ECBStyles : tCIDLib::TCard4
    {
        NoAuto = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ECBStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ECBStyles operator|(const tCIDCtrls::ECBStyles eLHS, const tCIDCtrls::ECBStyles eRHS)
    {    
        return tCIDCtrls::ECBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ECBStyles& operator|=(tCIDCtrls::ECBStyles& eLHS, const tCIDCtrls::ECBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ECBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ECBStyles operator&(const tCIDCtrls::ECBStyles eLHS, const tCIDCtrls::ECBStyles eRHS)
    {    
        return tCIDCtrls::ECBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ECBStyles& operator&=(tCIDCtrls::ECBStyles& eLHS, const tCIDCtrls::ECBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ECBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  The styles for the combo box control
    //                  
    // ------------------------------------------------------------------------
    enum class EComboStyles : tCIDLib::TCard4
    {
        ReadOnly = 0x00000001
        , Sort = 0x00000002
        , Count = 2
        , None = 0
        , AllBits = 0x3
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EComboStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EComboStyles operator|(const tCIDCtrls::EComboStyles eLHS, const tCIDCtrls::EComboStyles eRHS)
    {    
        return tCIDCtrls::EComboStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EComboStyles& operator|=(tCIDCtrls::EComboStyles& eLHS, const tCIDCtrls::EComboStyles eRHS)
    {    
        eLHS = tCIDCtrls::EComboStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EComboStyles operator&(const tCIDCtrls::EComboStyles eLHS, const tCIDCtrls::EComboStyles eRHS)
    {    
        return tCIDCtrls::EComboStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EComboStyles& operator&=(tCIDCtrls::EComboStyles& eLHS, const tCIDCtrls::EComboStyles eRHS)
    {    
        eLHS = tCIDCtrls::EComboStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  The flags for the custom drawing callback
    //                  
    // ------------------------------------------------------------------------
    enum class ECustDrFlags : tCIDLib::TCard4
    {
        Disabled = 0x00000001
        , Selected = 0x00000002
        , Focus = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ECustDrFlags eVal);

    [[nodiscard]] constexpr tCIDCtrls::ECustDrFlags operator|(const tCIDCtrls::ECustDrFlags eLHS, const tCIDCtrls::ECustDrFlags eRHS)
    {    
        return tCIDCtrls::ECustDrFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ECustDrFlags& operator|=(tCIDCtrls::ECustDrFlags& eLHS, const tCIDCtrls::ECustDrFlags eRHS)
    {    
        eLHS = tCIDCtrls::ECustDrFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ECustDrFlags operator&(const tCIDCtrls::ECustDrFlags eLHS, const tCIDCtrls::ECustDrFlags eRHS)
    {    
        return tCIDCtrls::ECustDrFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ECustDrFlags& operator&=(tCIDCtrls::ECustDrFlags& eLHS, const tCIDCtrls::ECustDrFlags eRHS)
    {    
        eLHS = tCIDCtrls::ECustDrFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Entry field specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class EEFStyles : tCIDLib::TCard4
    {
        Password = 0x00000001
        , Number = 0x00000002
        , UpperCase = 0x00000004
        , CueOnFocus = 0x00000008
        , ParentMenu = 0x00000010
        , ReadOnly = 0x00000020
        , Count = 6
        , None = 0
        , AllBits = 0x3F
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EEFStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EEFStyles operator|(const tCIDCtrls::EEFStyles eLHS, const tCIDCtrls::EEFStyles eRHS)
    {    
        return tCIDCtrls::EEFStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EEFStyles& operator|=(tCIDCtrls::EEFStyles& eLHS, const tCIDCtrls::EEFStyles eRHS)
    {    
        eLHS = tCIDCtrls::EEFStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EEFStyles operator&(const tCIDCtrls::EEFStyles eLHS, const tCIDCtrls::EEFStyles eRHS)
    {    
        return tCIDCtrls::EEFStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EEFStyles& operator&=(tCIDCtrls::EEFStyles& eLHS, const tCIDCtrls::EEFStyles eRHS)
    {    
        eLHS = tCIDCtrls::EEFStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  File open dialog options.
    //  
    //  FileSystemOnly means just file system objects, no desktop and whatnot. There
    //  is a separate parameter for what type of things to allow (files, paths, or
    //  either.)
    //  
    //  SelectFolders means they can only select paths, not files. Otherwise it can
    //  be either and the caller has to check for paths and ignore them if he doesn't
    //  accept them.
    //  
    //  They don't map directly to any underlying values, so actual values don't
    //  matter other than for backwards binary compability.
    //                  
    // ------------------------------------------------------------------------
    enum class EFOpenOpts : tCIDLib::TCard4
    {
        ConfirmPrompt = 0x00000001
        , FileMustExist = 0x00000002
        , FileSystemOnly = 0x00000004
        , MultiSelect = 0x00000008
        , NoReadOnly = 0x00000010
        , PathMustExist = 0x00000020
        , SelectFolders = 0x00000040
        , ShowSpecialFiles = 0x00000080
        , StrictTypes = 0x00000100
        , Count = 9
        , None = 0
        , AllBits = 0x1FF
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EFOpenOpts eVal);

    [[nodiscard]] constexpr tCIDCtrls::EFOpenOpts operator|(const tCIDCtrls::EFOpenOpts eLHS, const tCIDCtrls::EFOpenOpts eRHS)
    {    
        return tCIDCtrls::EFOpenOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EFOpenOpts& operator|=(tCIDCtrls::EFOpenOpts& eLHS, const tCIDCtrls::EFOpenOpts eRHS)
    {    
        eLHS = tCIDCtrls::EFOpenOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EFOpenOpts operator&(const tCIDCtrls::EFOpenOpts eLHS, const tCIDCtrls::EFOpenOpts eRHS)
    {    
        return tCIDCtrls::EFOpenOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EFOpenOpts& operator&=(tCIDCtrls::EFOpenOpts& eLHS, const tCIDCtrls::EFOpenOpts eRHS)
    {    
        eLHS = tCIDCtrls::EFOpenOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Frame window specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class EFrameStyles : tCIDLib::TCard4
    {
        NoActivate = 0x00000001
        , StatusBar = 0x00000002
        , MaxButton = 0x00000004
        , MinButton = 0x00000008
        , SysMenu = 0x00000010
        , NoClose = 0x10000000
        , Count = 6
        , None = 0
        , AllBits = 0x1000001F
        , StdFrame = 0x0000001C
        , StdSBFrame = 0x0000001E
        , NoCloseStdFrame = 0x1000001C
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EFrameStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EFrameStyles operator|(const tCIDCtrls::EFrameStyles eLHS, const tCIDCtrls::EFrameStyles eRHS)
    {    
        return tCIDCtrls::EFrameStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EFrameStyles& operator|=(tCIDCtrls::EFrameStyles& eLHS, const tCIDCtrls::EFrameStyles eRHS)
    {    
        eLHS = tCIDCtrls::EFrameStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EFrameStyles operator&(const tCIDCtrls::EFrameStyles eLHS, const tCIDCtrls::EFrameStyles eRHS)
    {    
        return tCIDCtrls::EFrameStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EFrameStyles& operator&=(tCIDCtrls::EFrameStyles& eLHS, const tCIDCtrls::EFrameStyles eRHS)
    {    
        eLHS = tCIDCtrls::EFrameStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  List box specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class ELBStyles : tCIDLib::TCard4
    {
        Sorted = 0x00000001
        , MultiSel = 0x00000002
        , ScrollAlways = 0x00000004
        , ReadOnly = 0x00000008
        , AutoAddBottom = 0x00000010
        , CustDraw = 0x00000020
        , Count = 6
        , None = 0
        , AllBits = 0x3F
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ELBStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ELBStyles operator|(const tCIDCtrls::ELBStyles eLHS, const tCIDCtrls::ELBStyles eRHS)
    {    
        return tCIDCtrls::ELBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ELBStyles& operator|=(tCIDCtrls::ELBStyles& eLHS, const tCIDCtrls::ELBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ELBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ELBStyles operator&(const tCIDCtrls::ELBStyles eLHS, const tCIDCtrls::ELBStyles eRHS)
    {    
        return tCIDCtrls::ELBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ELBStyles& operator&=(tCIDCtrls::ELBStyles& eLHS, const tCIDCtrls::ELBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ELBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  List box specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class EMCLBStyles : tCIDLib::TCard4
    {
        NoTitles = 0x00000001
        , MultiSel = 0x00000002
        , FullRowSel = 0x00000004
        , AutoLastCol = 0x00000008
        , NoColResize = 0x00000010
        , ColSort = 0x00000020
        , DblBuffer = 0x00000040
        , Sorted = 0x00000080
        , FocusSel = 0x00000100
        , GridLines = 0x00000200
        , Count = 10
        , None = 0
        , AllBits = 0x3FF
        , AutoSort = 0x000000A0
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMCLBStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EMCLBStyles operator|(const tCIDCtrls::EMCLBStyles eLHS, const tCIDCtrls::EMCLBStyles eRHS)
    {    
        return tCIDCtrls::EMCLBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMCLBStyles& operator|=(tCIDCtrls::EMCLBStyles& eLHS, const tCIDCtrls::EMCLBStyles eRHS)
    {    
        eLHS = tCIDCtrls::EMCLBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EMCLBStyles operator&(const tCIDCtrls::EMCLBStyles eLHS, const tCIDCtrls::EMCLBStyles eRHS)
    {    
        return tCIDCtrls::EMCLBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMCLBStyles& operator&=(tCIDCtrls::EMCLBStyles& eLHS, const tCIDCtrls::EMCLBStyles eRHS)
    {    
        eLHS = tCIDCtrls::EMCLBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Multi-column list custom draw options
    //                  
    // ------------------------------------------------------------------------
    enum class EMCLBCustOpts : tCIDLib::TCard4
    {
        PreRow = 0x00000001
        , PostRow = 0x00000002
        , PreCol = 0x00000004
        , PostCol = 0x00000008
        , PostDraw = 0x00000010
        , Count = 5
        , None = 0
        , AllBits = 0x1F
        , All = 0x0000001F
        , AllPost = 0x0000001A
        , AllPre = 0x00000005
        , AllRowCol = 0x0000000F
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMCLBCustOpts eVal);

    [[nodiscard]] constexpr tCIDCtrls::EMCLBCustOpts operator|(const tCIDCtrls::EMCLBCustOpts eLHS, const tCIDCtrls::EMCLBCustOpts eRHS)
    {    
        return tCIDCtrls::EMCLBCustOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMCLBCustOpts& operator|=(tCIDCtrls::EMCLBCustOpts& eLHS, const tCIDCtrls::EMCLBCustOpts eRHS)
    {    
        eLHS = tCIDCtrls::EMCLBCustOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EMCLBCustOpts operator&(const tCIDCtrls::EMCLBCustOpts eLHS, const tCIDCtrls::EMCLBCustOpts eRHS)
    {    
        return tCIDCtrls::EMCLBCustOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMCLBCustOpts& operator&=(tCIDCtrls::EMCLBCustOpts& eLHS, const tCIDCtrls::EMCLBCustOpts eRHS)
    {    
        eLHS = tCIDCtrls::EMCLBCustOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Multi-column list custom draw return values
    //                  
    // ------------------------------------------------------------------------
    enum class EMCLBCustRets : tCIDLib::TCard4
    {
        NewFont = 0x00000002
        , DontDraw = 0x00000004
        , NewTextClr = 0x10000000
        , NewBgnClr = 0x20000000
        , Count = 4
        , None = 0
        , AllBits = 0x30000006
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMCLBCustRets eVal);

    [[nodiscard]] constexpr tCIDCtrls::EMCLBCustRets operator|(const tCIDCtrls::EMCLBCustRets eLHS, const tCIDCtrls::EMCLBCustRets eRHS)
    {    
        return tCIDCtrls::EMCLBCustRets(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMCLBCustRets& operator|=(tCIDCtrls::EMCLBCustRets& eLHS, const tCIDCtrls::EMCLBCustRets eRHS)
    {    
        eLHS = tCIDCtrls::EMCLBCustRets(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EMCLBCustRets operator&(const tCIDCtrls::EMCLBCustRets eLHS, const tCIDCtrls::EMCLBCustRets eRHS)
    {    
        return tCIDCtrls::EMCLBCustRets(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMCLBCustRets& operator&=(tCIDCtrls::EMCLBCustRets& eLHS, const tCIDCtrls::EMCLBCustRets eRHS)
    {    
        eLHS = tCIDCtrls::EMCLBCustRets(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Multi-line editor specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class EMLEStyles : tCIDLib::TCard4
    {
        AutoScroll = 0x00000001
        , WantEnter = 0x00000002
        , ReadOnly = 0x00000004
        , ReportChanges = 0x00000008
        , Count = 4
        , None = 0
        , AllBits = 0xF
        , Std = 0x00000003
        , StdReadOnly = 0x00000004
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMLEStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EMLEStyles operator|(const tCIDCtrls::EMLEStyles eLHS, const tCIDCtrls::EMLEStyles eRHS)
    {    
        return tCIDCtrls::EMLEStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMLEStyles& operator|=(tCIDCtrls::EMLEStyles& eLHS, const tCIDCtrls::EMLEStyles eRHS)
    {    
        eLHS = tCIDCtrls::EMLEStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EMLEStyles operator&(const tCIDCtrls::EMLEStyles eLHS, const tCIDCtrls::EMLEStyles eRHS)
    {    
        return tCIDCtrls::EMLEStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMLEStyles& operator&=(tCIDCtrls::EMLEStyles& eLHS, const tCIDCtrls::EMLEStyles eRHS)
    {    
        eLHS = tCIDCtrls::EMLEStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Multi-line static text specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class EMLSStyles : tCIDLib::TCard4
    {
        ReportClicks = 0x00000001
        , SizeToText = 0x00000002
        , NoWrap = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMLSStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EMLSStyles operator|(const tCIDCtrls::EMLSStyles eLHS, const tCIDCtrls::EMLSStyles eRHS)
    {    
        return tCIDCtrls::EMLSStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMLSStyles& operator|=(tCIDCtrls::EMLSStyles& eLHS, const tCIDCtrls::EMLSStyles eRHS)
    {    
        eLHS = tCIDCtrls::EMLSStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EMLSStyles operator&(const tCIDCtrls::EMLSStyles eLHS, const tCIDCtrls::EMLSStyles eRHS)
    {    
        return tCIDCtrls::EMLSStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EMLSStyles& operator&=(tCIDCtrls::EMLSStyles& eLHS, const tCIDCtrls::EMLSStyles eRHS)
    {    
        eLHS = tCIDCtrls::EMLSStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Mouse activiation results
    //                  
    // ------------------------------------------------------------------------
    enum class EMouseActs
    {
        None
        , Activate
        , ActivateEat
        , NoActivate
        , NoActivateEat
        , Count
        , Min = None
        , Max = NoActivateEat
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMouseActs eVal);

    CIDCTRLSEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDCtrls::EMouseActs eToStream);
    
    // ------------------------------------------------------------------------
    //  The types of mouse buttons
    //                  
    // ------------------------------------------------------------------------
    enum class EMouseButts
    {
        Left
        , Middle
        , Right
        , Count
        , Min = Left
        , Max = Right
    };
    [[nodiscard]] CIDCTRLSEXP EMouseButts eXlatEMouseButts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CIDCTRLSEXP const TString& strXlatEMouseButts(const EMouseButts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMouseButts eVal);

    inline tCIDCtrls::EMouseButts operator++(CIOP tCIDCtrls::EMouseButts& eVal, int)
    {
        const tCIDCtrls::EMouseButts eTmp = eVal;
        eVal = tCIDCtrls::EMouseButts(int(eVal)+1);
        return eTmp;
    }

    CIDCTRLSEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDCtrls::EMouseButts eToStream);
    
    // ------------------------------------------------------------------------
    //  The types of mouse button clicks
    //                  
    // ------------------------------------------------------------------------
    enum class EMouseClicks
    {
        Down
        , Up
        , Double
        , Count
        , Min = Down
        , Max = Double
    };
    [[nodiscard]] CIDCTRLSEXP EMouseClicks eXlatEMouseClicks(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CIDCTRLSEXP const TString& strXlatEMouseClicks(const EMouseClicks eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EMouseClicks eVal);

    CIDCTRLSEXP TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDCtrls::EMouseClicks eToStream);
    
    // ------------------------------------------------------------------------
    //  Object view styles
    //                  
    // ------------------------------------------------------------------------
    enum class EObjVStyles : tCIDLib::TCard4
    {
        MultiSel = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EObjVStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EObjVStyles operator|(const tCIDCtrls::EObjVStyles eLHS, const tCIDCtrls::EObjVStyles eRHS)
    {    
        return tCIDCtrls::EObjVStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EObjVStyles& operator|=(tCIDCtrls::EObjVStyles& eLHS, const tCIDCtrls::EObjVStyles eRHS)
    {    
        eLHS = tCIDCtrls::EObjVStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EObjVStyles operator&(const tCIDCtrls::EObjVStyles eLHS, const tCIDCtrls::EObjVStyles eRHS)
    {    
        return tCIDCtrls::EObjVStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EObjVStyles& operator&=(tCIDCtrls::EObjVStyles& eLHS, const tCIDCtrls::EObjVStyles eRHS)
    {    
        eLHS = tCIDCtrls::EObjVStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Progress bar styles
    //                  
    // ------------------------------------------------------------------------
    enum class EPBarStyles : tCIDLib::TCard4
    {
        Vertical = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EPBarStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EPBarStyles operator|(const tCIDCtrls::EPBarStyles eLHS, const tCIDCtrls::EPBarStyles eRHS)
    {    
        return tCIDCtrls::EPBarStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EPBarStyles& operator|=(tCIDCtrls::EPBarStyles& eLHS, const tCIDCtrls::EPBarStyles eRHS)
    {    
        eLHS = tCIDCtrls::EPBarStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EPBarStyles operator&(const tCIDCtrls::EPBarStyles eLHS, const tCIDCtrls::EPBarStyles eRHS)
    {    
        return tCIDCtrls::EPBarStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EPBarStyles& operator&=(tCIDCtrls::EPBarStyles& eLHS, const tCIDCtrls::EPBarStyles eRHS)
    {    
        eLHS = tCIDCtrls::EPBarStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Push button styles
    //                  
    // ------------------------------------------------------------------------
    enum class EPButtStyles : tCIDLib::TCard4
    {
        Default = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EPButtStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EPButtStyles operator|(const tCIDCtrls::EPButtStyles eLHS, const tCIDCtrls::EPButtStyles eRHS)
    {    
        return tCIDCtrls::EPButtStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EPButtStyles& operator|=(tCIDCtrls::EPButtStyles& eLHS, const tCIDCtrls::EPButtStyles eRHS)
    {    
        eLHS = tCIDCtrls::EPButtStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EPButtStyles operator&(const tCIDCtrls::EPButtStyles eLHS, const tCIDCtrls::EPButtStyles eRHS)
    {    
        return tCIDCtrls::EPButtStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EPButtStyles& operator&=(tCIDCtrls::EPButtStyles& eLHS, const tCIDCtrls::EPButtStyles eRHS)
    {    
        eLHS = tCIDCtrls::EPButtStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Radio button styles
    //                  
    // ------------------------------------------------------------------------
    enum class ERBStyles : tCIDLib::TCard4
    {
        NoAuto = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ERBStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ERBStyles operator|(const tCIDCtrls::ERBStyles eLHS, const tCIDCtrls::ERBStyles eRHS)
    {    
        return tCIDCtrls::ERBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ERBStyles& operator|=(tCIDCtrls::ERBStyles& eLHS, const tCIDCtrls::ERBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ERBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ERBStyles operator&(const tCIDCtrls::ERBStyles eLHS, const tCIDCtrls::ERBStyles eRHS)
    {    
        return tCIDCtrls::ERBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ERBStyles& operator&=(tCIDCtrls::ERBStyles& eLHS, const tCIDCtrls::ERBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ERBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Scroll area styles
    //                  
    // ------------------------------------------------------------------------
    enum class EScrAStyles : tCIDLib::TCard4
    {
        PlaceHolder = 0x1
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EScrAStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EScrAStyles operator|(const tCIDCtrls::EScrAStyles eLHS, const tCIDCtrls::EScrAStyles eRHS)
    {    
        return tCIDCtrls::EScrAStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EScrAStyles& operator|=(tCIDCtrls::EScrAStyles& eLHS, const tCIDCtrls::EScrAStyles eRHS)
    {    
        eLHS = tCIDCtrls::EScrAStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EScrAStyles operator&(const tCIDCtrls::EScrAStyles eLHS, const tCIDCtrls::EScrAStyles eRHS)
    {    
        return tCIDCtrls::EScrAStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EScrAStyles& operator&=(tCIDCtrls::EScrAStyles& eLHS, const tCIDCtrls::EScrAStyles eRHS)
    {    
        eLHS = tCIDCtrls::EScrAStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Scroll bar styles for standalone scroll bars
    //                  
    // ------------------------------------------------------------------------
    enum class ESBStyles : tCIDLib::TCard4
    {
        Placeholder = 0x1
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ESBStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ESBStyles operator|(const tCIDCtrls::ESBStyles eLHS, const tCIDCtrls::ESBStyles eRHS)
    {    
        return tCIDCtrls::ESBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESBStyles& operator|=(tCIDCtrls::ESBStyles& eLHS, const tCIDCtrls::ESBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESBStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ESBStyles operator&(const tCIDCtrls::ESBStyles eLHS, const tCIDCtrls::ESBStyles eRHS)
    {    
        return tCIDCtrls::ESBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESBStyles& operator&=(tCIDCtrls::ESBStyles& eLHS, const tCIDCtrls::ESBStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESBStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Multi-line static text specific styles
    //                  
    // ------------------------------------------------------------------------
    enum class ESldrStyles : tCIDLib::TCard4
    {
        TrackEvs = 0x00000001
        , Ticks = 0x00000002
        , Vertical = 0x00000004
        , AutoTicks = 0x00000008
        , Count = 4
        , None = 0
        , AllBits = 0xF
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ESldrStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ESldrStyles operator|(const tCIDCtrls::ESldrStyles eLHS, const tCIDCtrls::ESldrStyles eRHS)
    {    
        return tCIDCtrls::ESldrStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESldrStyles& operator|=(tCIDCtrls::ESldrStyles& eLHS, const tCIDCtrls::ESldrStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESldrStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ESldrStyles operator&(const tCIDCtrls::ESldrStyles eLHS, const tCIDCtrls::ESldrStyles eRHS)
    {    
        return tCIDCtrls::ESldrStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESldrStyles& operator&=(tCIDCtrls::ESldrStyles& eLHS, const tCIDCtrls::ESldrStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESldrStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Spin box styles
    //                  
    // ------------------------------------------------------------------------
    enum class ESpinStyles : tCIDLib::TCard4
    {
        Wrap = 0x00000001
        , Numeric = 0x00000002
        , ReadOnly = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ESpinStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ESpinStyles operator|(const tCIDCtrls::ESpinStyles eLHS, const tCIDCtrls::ESpinStyles eRHS)
    {    
        return tCIDCtrls::ESpinStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESpinStyles& operator|=(tCIDCtrls::ESpinStyles& eLHS, const tCIDCtrls::ESpinStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESpinStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ESpinStyles operator&(const tCIDCtrls::ESpinStyles eLHS, const tCIDCtrls::ESpinStyles eRHS)
    {    
        return tCIDCtrls::ESpinStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESpinStyles& operator&=(tCIDCtrls::ESpinStyles& eLHS, const tCIDCtrls::ESpinStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESpinStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Static color styles
    //                  
    // ------------------------------------------------------------------------
    enum class ESClrStyles : tCIDLib::TCard4
    {
        ReportClicks = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ESClrStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ESClrStyles operator|(const tCIDCtrls::ESClrStyles eLHS, const tCIDCtrls::ESClrStyles eRHS)
    {    
        return tCIDCtrls::ESClrStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESClrStyles& operator|=(tCIDCtrls::ESClrStyles& eLHS, const tCIDCtrls::ESClrStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESClrStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ESClrStyles operator&(const tCIDCtrls::ESClrStyles eLHS, const tCIDCtrls::ESClrStyles eRHS)
    {    
        return tCIDCtrls::ESClrStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESClrStyles& operator&=(tCIDCtrls::ESClrStyles& eLHS, const tCIDCtrls::ESClrStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESClrStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Static image styles
    //                  
    // ------------------------------------------------------------------------
    enum class ESImgStyles : tCIDLib::TCard4
    {
        ReportClicks = 0x00000001
        , Transparent = 0x00000002
        , Count = 2
        , None = 0
        , AllBits = 0x3
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ESImgStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ESImgStyles operator|(const tCIDCtrls::ESImgStyles eLHS, const tCIDCtrls::ESImgStyles eRHS)
    {    
        return tCIDCtrls::ESImgStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESImgStyles& operator|=(tCIDCtrls::ESImgStyles& eLHS, const tCIDCtrls::ESImgStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESImgStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ESImgStyles operator&(const tCIDCtrls::ESImgStyles eLHS, const tCIDCtrls::ESImgStyles eRHS)
    {    
        return tCIDCtrls::ESImgStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESImgStyles& operator&=(tCIDCtrls::ESImgStyles& eLHS, const tCIDCtrls::ESImgStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESImgStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Static image styles
    //                  
    // ------------------------------------------------------------------------
    enum class ESTextStyles : tCIDLib::TCard4
    {
        NoMnemonics = 0x00000001
        , ReportClicks = 0x00000002
        , EndEllipsis = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ESTextStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ESTextStyles operator|(const tCIDCtrls::ESTextStyles eLHS, const tCIDCtrls::ESTextStyles eRHS)
    {    
        return tCIDCtrls::ESTextStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESTextStyles& operator|=(tCIDCtrls::ESTextStyles& eLHS, const tCIDCtrls::ESTextStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESTextStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ESTextStyles operator&(const tCIDCtrls::ESTextStyles eLHS, const tCIDCtrls::ESTextStyles eRHS)
    {    
        return tCIDCtrls::ESTextStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ESTextStyles& operator&=(tCIDCtrls::ESTextStyles& eLHS, const tCIDCtrls::ESTextStyles eRHS)
    {    
        eLHS = tCIDCtrls::ESTextStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Tabbed window styles
    //  
    //  FixedFirst means the first tab cannot be moved out of the far left position.
    //  If the user selects other tabs from the drop down, they are moved to position
    //  1, not 0.
    //  
    //  TopLevel indicates that it's going to contain tabs that themselves contain tabbed
    //  windows. In that case it will register an extra set of Ctrl-F4/F6 handlers, whihch
    //  include Shift as well. This way, you can always force the top level tabbed window to
    //  respond even if you are within a nested one (which would otherwise eat the keys.)
    //                  
    // ------------------------------------------------------------------------
    enum class ETabWStyles : tCIDLib::TCard4
    {
        TwoLineHdr = 0x00000001
        , FixedFirst = 0x00000002
        , TopLevel = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ETabWStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ETabWStyles operator|(const tCIDCtrls::ETabWStyles eLHS, const tCIDCtrls::ETabWStyles eRHS)
    {    
        return tCIDCtrls::ETabWStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETabWStyles& operator|=(tCIDCtrls::ETabWStyles& eLHS, const tCIDCtrls::ETabWStyles eRHS)
    {    
        eLHS = tCIDCtrls::ETabWStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ETabWStyles operator&(const tCIDCtrls::ETabWStyles eLHS, const tCIDCtrls::ETabWStyles eRHS)
    {    
        return tCIDCtrls::ETabWStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETabWStyles& operator&=(tCIDCtrls::ETabWStyles& eLHS, const tCIDCtrls::ETabWStyles eRHS)
    {    
        eLHS = tCIDCtrls::ETabWStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Tree view styles
    //                  
    // ------------------------------------------------------------------------
    enum class ETreeStyles : tCIDLib::TCard4
    {
        CheckBoxes = 0x00000001
        , HasLines = 0x00000002
        , ReadOnly = 0x00000004
        , SingleExp = 0x00000008
        , ToolTips = 0x00000010
        , InvokeOnEnter = 0x00000020
        , Count = 6
        , None = 0
        , AllBits = 0x3F
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ETreeStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::ETreeStyles operator|(const tCIDCtrls::ETreeStyles eLHS, const tCIDCtrls::ETreeStyles eRHS)
    {    
        return tCIDCtrls::ETreeStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETreeStyles& operator|=(tCIDCtrls::ETreeStyles& eLHS, const tCIDCtrls::ETreeStyles eRHS)
    {    
        eLHS = tCIDCtrls::ETreeStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ETreeStyles operator&(const tCIDCtrls::ETreeStyles eLHS, const tCIDCtrls::ETreeStyles eRHS)
    {    
        return tCIDCtrls::ETreeStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETreeStyles& operator&=(tCIDCtrls::ETreeStyles& eLHS, const tCIDCtrls::ETreeStyles eRHS)
    {    
        eLHS = tCIDCtrls::ETreeStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Tree view styles
    //                  
    // ------------------------------------------------------------------------
    enum class ETreeCustOpts : tCIDLib::TCard4
    {
        PreItem = 0x00000001
        , PostItem = 0x00000002
        , PostDraw = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
        , All = 0x00000007
        , AllItem = 0x00000003
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ETreeCustOpts eVal);

    [[nodiscard]] constexpr tCIDCtrls::ETreeCustOpts operator|(const tCIDCtrls::ETreeCustOpts eLHS, const tCIDCtrls::ETreeCustOpts eRHS)
    {    
        return tCIDCtrls::ETreeCustOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETreeCustOpts& operator|=(tCIDCtrls::ETreeCustOpts& eLHS, const tCIDCtrls::ETreeCustOpts eRHS)
    {    
        eLHS = tCIDCtrls::ETreeCustOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ETreeCustOpts operator&(const tCIDCtrls::ETreeCustOpts eLHS, const tCIDCtrls::ETreeCustOpts eRHS)
    {    
        return tCIDCtrls::ETreeCustOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETreeCustOpts& operator&=(tCIDCtrls::ETreeCustOpts& eLHS, const tCIDCtrls::ETreeCustOpts eRHS)
    {    
        eLHS = tCIDCtrls::ETreeCustOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Tree view styles
    //                  
    // ------------------------------------------------------------------------
    enum class ETreeCustRets : tCIDLib::TCard4
    {
        NewFont = 0x00000001
        , NewTextClr = 0x00000002
        , NewBgnClr = 0x00000004
        , Count = 3
        , None = 0
        , AllBits = 0x7
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const ETreeCustRets eVal);

    [[nodiscard]] constexpr tCIDCtrls::ETreeCustRets operator|(const tCIDCtrls::ETreeCustRets eLHS, const tCIDCtrls::ETreeCustRets eRHS)
    {    
        return tCIDCtrls::ETreeCustRets(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETreeCustRets& operator|=(tCIDCtrls::ETreeCustRets& eLHS, const tCIDCtrls::ETreeCustRets eRHS)
    {    
        eLHS = tCIDCtrls::ETreeCustRets(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::ETreeCustRets operator&(const tCIDCtrls::ETreeCustRets eLHS, const tCIDCtrls::ETreeCustRets eRHS)
    {    
        return tCIDCtrls::ETreeCustRets(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::ETreeCustRets& operator&=(tCIDCtrls::ETreeCustRets& eLHS, const tCIDCtrls::ETreeCustRets eRHS)
    {    
        eLHS = tCIDCtrls::ETreeCustRets(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Up/Down control styles
    //                  
    // ------------------------------------------------------------------------
    enum class EUpDnStyles : tCIDLib::TCard4
    {
        Wrap = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EUpDnStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EUpDnStyles operator|(const tCIDCtrls::EUpDnStyles eLHS, const tCIDCtrls::EUpDnStyles eRHS)
    {    
        return tCIDCtrls::EUpDnStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EUpDnStyles& operator|=(tCIDCtrls::EUpDnStyles& eLHS, const tCIDCtrls::EUpDnStyles eRHS)
    {    
        eLHS = tCIDCtrls::EUpDnStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EUpDnStyles operator&(const tCIDCtrls::EUpDnStyles eLHS, const tCIDCtrls::EUpDnStyles eRHS)
    {    
        return tCIDCtrls::EUpDnStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EUpDnStyles& operator&=(tCIDCtrls::EUpDnStyles& eLHS, const tCIDCtrls::EUpDnStyles eRHS)
    {    
        eLHS = tCIDCtrls::EUpDnStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  Vertical separator styles
    //                  
    // ------------------------------------------------------------------------
    enum class EVSepStyles : tCIDLib::TCard4
    {
        Left = 0x00000001
        , Count = 1
        , None = 0
        , AllBits = 0x1
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EVSepStyles eVal);

    [[nodiscard]] constexpr tCIDCtrls::EVSepStyles operator|(const tCIDCtrls::EVSepStyles eLHS, const tCIDCtrls::EVSepStyles eRHS)
    {    
        return tCIDCtrls::EVSepStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EVSepStyles& operator|=(tCIDCtrls::EVSepStyles& eLHS, const tCIDCtrls::EVSepStyles eRHS)
    {    
        eLHS = tCIDCtrls::EVSepStyles(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EVSepStyles operator&(const tCIDCtrls::EVSepStyles eLHS, const tCIDCtrls::EVSepStyles eRHS)
    {    
        return tCIDCtrls::EVSepStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EVSepStyles& operator&=(tCIDCtrls::EVSepStyles& eLHS, const tCIDCtrls::EVSepStyles eRHS)
    {    
        eLHS = tCIDCtrls::EVSepStyles(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  The 'want input' values that windows must set if they want to process
    //  certain types of keys, else the system will pass them on to other things.
    //  This is passed to TWindow:SetWantInput().
    //                  
    // ------------------------------------------------------------------------
    enum class EWantInputs : tCIDLib::TCard4
    {
        AllKeys = 0x0004
        , Arrows = 0x0001
        , Chars = 0x0080
        , Tab = 0x0002
        , Count = 4
        , None = 0
        , AllBits = 0x87
        , CharsArrows = 0x0081
        , Everything = 0x0087
    };
    [[nodiscard]] CIDCTRLSEXP tCIDLib::TBoolean bIsValidEnum(const EWantInputs eVal);

    [[nodiscard]] constexpr tCIDCtrls::EWantInputs operator|(const tCIDCtrls::EWantInputs eLHS, const tCIDCtrls::EWantInputs eRHS)
    {    
        return tCIDCtrls::EWantInputs(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EWantInputs& operator|=(tCIDCtrls::EWantInputs& eLHS, const tCIDCtrls::EWantInputs eRHS)
    {    
        eLHS = tCIDCtrls::EWantInputs(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCIDCtrls::EWantInputs operator&(const tCIDCtrls::EWantInputs eLHS, const tCIDCtrls::EWantInputs eRHS)
    {    
        return tCIDCtrls::EWantInputs(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCIDCtrls::EWantInputs& operator&=(tCIDCtrls::EWantInputs& eLHS, const tCIDCtrls::EWantInputs eRHS)
    {    
        eLHS = tCIDCtrls::EWantInputs(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
}

#pragma CIDLIB_POPPACK



































