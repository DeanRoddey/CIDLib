// ----------------------------------------------------------------------------
//  FILE: CIDPNG_Shared.hpp
//  DATE: Fri, Feb 14 18:42:56 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCIDPNG
{
    
    // ------------------------------------------------------------------------
    //  Our representation of the chunk types. We make it bitmapped so that
    //  we can also use it to keep up with whether we've seen specific
    //  chunks.
    //                  
    // ------------------------------------------------------------------------
    enum class EChunks : tCIDLib::TCard4
    {
        Header = 0x00000001
        , Palette = 0x00000002
        , Trans = 0x00000004
        , Data = 0x00000008
        , End = 0x00000010
        , Gamma = 0x00100000
        , BgnClr = 0x00200000
        , TransClr = 0x10000000
        , Count = 8
        , None = 0
        , AllBits = 0x1030001F
    };
     tCIDLib::TBoolean bIsValidEnum(const EChunks eVal);

    
    // ------------------------------------------------------------------------
    //  The supported compression schemes
    //                  
    // ------------------------------------------------------------------------
    enum class ECompTypes
    {
        Deflate
        , Count
        , Min = Deflate
        , Max = Deflate
    };
     tCIDLib::TBoolean bIsValidEnum(const ECompTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The supported interlacing schemes
    //                  
    // ------------------------------------------------------------------------
    enum class EInterlaces
    {
        None
        , Adam7
        , Count
        , Min = None
        , Max = Adam7
    };
     tCIDLib::TBoolean bIsValidEnum(const EInterlaces eVal);

}

#pragma CIDLIB_POPPACK

 TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDPNG::EChunks eToStream);
 TBinInStream& operator>>(TBinInStream& strmSrc, tCIDPNG::EChunks& eToFill);
 tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDPNG::EChunks* const aeList, const tCIDLib::TCard4 c4Count);
 tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDPNG::EChunks* const aeList, const tCIDLib::TCard4 c4Count);
constexpr tCIDPNG::EChunks operator|(const tCIDPNG::EChunks eLHS, const tCIDPNG::EChunks eRHS)
{    
    return tCIDPNG::EChunks(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCIDPNG::EChunks& operator|=(tCIDPNG::EChunks& eLHS, const tCIDPNG::EChunks eRHS)
{    
    eLHS = tCIDPNG::EChunks(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}
constexpr tCIDPNG::EChunks operator&(const tCIDPNG::EChunks eLHS, const tCIDPNG::EChunks eRHS)
{    
    return tCIDPNG::EChunks(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCIDPNG::EChunks& operator&=(tCIDPNG::EChunks& eLHS, const tCIDPNG::EChunks eRHS)
{    
    eLHS = tCIDPNG::EChunks(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}

 TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDPNG::ECompTypes eToStream);
 TBinInStream& operator>>(TBinInStream& strmSrc, tCIDPNG::ECompTypes& eToFill);
 tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDPNG::ECompTypes* const aeList, const tCIDLib::TCard4 c4Count);
 tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDPNG::ECompTypes* const aeList, const tCIDLib::TCard4 c4Count);

 TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDPNG::EInterlaces eToStream);
 TBinInStream& operator>>(TBinInStream& strmSrc, tCIDPNG::EInterlaces& eToFill);
 tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDPNG::EInterlaces* const aeList, const tCIDLib::TCard4 c4Count);
 tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDPNG::EInterlaces* const aeList, const tCIDLib::TCard4 c4Count);

