// ----------------------------------------------------------------------------
//  FILE: CIDGraphDev_Shared.cpp
//  DATE: Tue, Sep 24 17:51:15 2019 -0400
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "CIDGraphDev_.hpp"



static TEnumMap::TEnumValItem aeitemValues_EBackMixModes[2] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EBackMixModes::Opaque), 0, 0,  { L"", L"", L"", L"Opaque", L"EBackMixModes::Opaque", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBackMixModes::Transparent), 0, 0,  { L"", L"", L"", L"Transparent", L"EBackMixModes::Transparent", L"" } }

};

static TEnumMap emapEBackMixModes
(
     L"EBackMixModes"
     , 2
     , kCIDLib::False
     , aeitemValues_EBackMixModes
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EBackMixModes::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEBackMixModes(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEBackMixModes.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEBackMixModes(const tCIDGraphDev::EBackMixModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEBackMixModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EBackMixModes tCIDGraphDev::eXlatEBackMixModes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EBackMixModes(emapEBackMixModes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EBackMixModes eVal)
{
    strmTar << emapEBackMixModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EBackMixModes operator++(tCIDGraphDev::EBackMixModes& eVal, int)
{
    tCIDGraphDev::EBackMixModes eTmp = eVal;
    eVal = tCIDGraphDev::EBackMixModes(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EBackMixModes eVal)
{
    return emapEBackMixModes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EBltTypes[5] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EBltTypes::None), 0, 0,  { L"", L"", L"", L"None", L"EBltTypes::None", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBltTypes::Clip), 0, 0,  { L"", L"", L"", L"Clip", L"EBltTypes::Clip", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBltTypes::Stretch), 0, 0,  { L"", L"", L"", L"Stretch", L"EBltTypes::Stretch", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBltTypes::Both), 0, 0,  { L"", L"", L"", L"Both", L"EBltTypes::Both", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBltTypes::Tile), 0, 0,  { L"", L"", L"", L"Tile", L"EBltTypes::Tile", L"" } }

};

static TEnumMap emapEBltTypes
(
     L"EBltTypes"
     , 5
     , kCIDLib::False
     , aeitemValues_EBltTypes
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EBltTypes::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEBltTypes(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEBltTypes.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEBltTypes(const tCIDGraphDev::EBltTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEBltTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EBltTypes tCIDGraphDev::eXlatEBltTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EBltTypes(emapEBltTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDGraphDev::EBltTypes operator++(tCIDGraphDev::EBltTypes& eVal, int)
{
    tCIDGraphDev::EBltTypes eTmp = eVal;
    eVal = tCIDGraphDev::EBltTypes(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EBltTypes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EBltTypes& eVal)
{
    eVal = tCIDGraphDev::EBltTypes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EBltTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EBltTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EBltTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EBltTypes eVal)
{
    return emapEBltTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EBmpModes[17] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::Blackness), 0, 0,  { L"", L"", L"", L"Blackness", L"EBmpModes::Blackness", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::CaptureBlt), 0, 0,  { L"", L"", L"", L"CaptureBlt", L"EBmpModes::CaptureBlt", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::DstInvert), 0, 0,  { L"", L"", L"", L"DstInvert", L"EBmpModes::DstInvert", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::MergeCopy), 0, 0,  { L"", L"", L"", L"MergeCopy", L"EBmpModes::MergeCopy", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::MergePaint), 0, 0,  { L"", L"", L"", L"MergePaint", L"EBmpModes::MergePaint", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::NoMirrorBitmap), 0, 0,  { L"", L"", L"", L"NoMirrorBitmap", L"EBmpModes::NoMirrorBitmap", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::NotSrcCopy), 0, 0,  { L"", L"", L"", L"NotSrcCopy", L"EBmpModes::NotSrcCopy", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::NotSrcErase), 0, 0,  { L"", L"", L"", L"NotSrcErase", L"EBmpModes::NotSrcErase", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::PatCopy), 0, 0,  { L"", L"", L"", L"PatCopy", L"EBmpModes::PatCopy", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::PatInvert), 0, 0,  { L"", L"", L"", L"PatInvert", L"EBmpModes::PatInvert", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::PatPaint), 0, 0,  { L"", L"", L"", L"PatPaint", L"EBmpModes::PatPaint", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::SrcAnd), 0, 0,  { L"", L"", L"", L"SrcAnd", L"EBmpModes::SrcAnd", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::SrcCopy), 0, 0,  { L"", L"", L"", L"SrcCopy", L"EBmpModes::SrcCopy", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::SrcErase), 0, 0,  { L"", L"", L"", L"SrcErase", L"EBmpModes::SrcErase", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::SrcInvert), 0, 0,  { L"", L"", L"", L"SrcInvert", L"EBmpModes::SrcInvert", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::SrcPaint), 0, 0,  { L"", L"", L"", L"SrcPaint", L"EBmpModes::SrcPaint", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EBmpModes::Whiteness), 0, 0,  { L"", L"", L"", L"Whiteness", L"EBmpModes::Whiteness", L"" } }

};

static TEnumMap emapEBmpModes
(
     L"EBmpModes"
     , 17
     , kCIDLib::False
     , aeitemValues_EBmpModes
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EBmpModes::Count)
);

const TString& tCIDGraphDev::strXlatEBmpModes(const tCIDGraphDev::EBmpModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEBmpModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EBmpModes tCIDGraphDev::eXlatEBmpModes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EBmpModes(emapEBmpModes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EBmpModes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EBmpModes& eVal)
{
    eVal = tCIDGraphDev::EBmpModes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EBmpModes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EBmpModes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EBmpModes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EBmpModes eVal)
{
    return emapEBmpModes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EFontDirs[4] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EFontDirs::D0), 0, 0,  { L"", L"0", L"", L"D0", L"EFontDirs::D0", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontDirs::D90), 0, 0,  { L"", L"90", L"", L"D90", L"EFontDirs::D90", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontDirs::D180), 0, 0,  { L"", L"180", L"", L"D180", L"EFontDirs::D180", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontDirs::D270), 0, 0,  { L"", L"270", L"", L"D270", L"EFontDirs::D270", L"" } }

};

static TEnumMap emapEFontDirs
(
     L"EFontDirs"
     , 4
     , kCIDLib::False
     , aeitemValues_EFontDirs
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EFontDirs::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEFontDirs(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEFontDirs.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEFontDirs(const tCIDGraphDev::EFontDirs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEFontDirs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tCIDGraphDev::EFontDirs tCIDGraphDev::eXlatEFontDirs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EFontDirs(emapEFontDirs.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EFontDirs eVal)
{
    strmTar << emapEFontDirs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EFontDirs operator++(tCIDGraphDev::EFontDirs& eVal, int)
{
    tCIDGraphDev::EFontDirs eTmp = eVal;
    eVal = tCIDGraphDev::EFontDirs(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EFontDirs eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EFontDirs& eVal)
{
    eVal = tCIDGraphDev::EFontDirs(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EFontDirs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EFontDirs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EFontDirs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EFontDirs eVal)
{
    return emapEFontDirs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EFontWeights[10] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::DontCare), 0, 0,  { L"", L"", L"", L"DontCare", L"EFontWeights::DontCare", L"Don't Care" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::Thin), 0, 0,  { L"", L"", L"", L"Thin", L"EFontWeights::Thin", L"Thin" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::ExtraLight), 0, 0,  { L"", L"", L"", L"ExtraLight", L"EFontWeights::ExtraLight", L"ExtraLight" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::Light), 0, 0,  { L"", L"", L"", L"Light", L"EFontWeights::Light", L"Light" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::Normal), 0, 0,  { L"", L"", L"", L"Normal", L"EFontWeights::Normal", L"Normal" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::Medium), 0, 0,  { L"", L"", L"", L"Medium", L"EFontWeights::Medium", L"Medium" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::SemiBold), 0, 0,  { L"", L"", L"", L"SemiBold", L"EFontWeights::SemiBold", L"SemiBold" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::Bold), 0, 0,  { L"", L"", L"", L"Bold", L"EFontWeights::Bold", L"Bold" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::ExtraBold), 0, 0,  { L"", L"", L"", L"ExtraBold", L"EFontWeights::ExtraBold", L"ExtraBold" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EFontWeights::Heavy), 0, 0,  { L"", L"", L"", L"Heavy", L"EFontWeights::Heavy", L"EHeavy" } }

};

static TEnumMap emapEFontWeights
(
     L"EFontWeights"
     , 10
     , kCIDLib::False
     , aeitemValues_EFontWeights
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EFontWeights::Count)
);

const TString& tCIDGraphDev::strAltXlatEFontWeights(const tCIDGraphDev::EFontWeights eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEFontWeights.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EFontWeights tCIDGraphDev::eAltXlatEFontWeights(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EFontWeights(emapEFontWeights.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TVoid tCIDGraphDev::FormatEFontWeights(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEFontWeights.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEFontWeights(const tCIDGraphDev::EFontWeights eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEFontWeights.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCIDGraphDev::EFontWeights tCIDGraphDev::eXlatEFontWeights(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EFontWeights(emapEFontWeights.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EFontWeights eVal)
{
    strmTar << emapEFontWeights.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EFontWeights operator++(tCIDGraphDev::EFontWeights& eVal, int)
{
    tCIDGraphDev::EFontWeights eTmp = eVal;
    eVal = tCIDGraphDev::EFontWeights(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EFontWeights eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EFontWeights& eVal)
{
    eVal = tCIDGraphDev::EFontWeights(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EFontWeights* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EFontWeights(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EFontWeights* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EFontWeights eVal)
{
    return emapEFontWeights.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EGradDirs[4] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EGradDirs::Horizontal), 0, 0,  { L"", L"", L"", L"Horizontal", L"EGradDirs::Horizontal", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EGradDirs::Vertical), 0, 0,  { L"", L"", L"", L"Vertical", L"EGradDirs::Vertical", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EGradDirs::UpDiagonal), 0, 0,  { L"", L"", L"", L"UpDiagonal", L"EGradDirs::UpDiagonal", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EGradDirs::DownDiagonal), 0, 0,  { L"", L"", L"", L"DownDiagonal", L"EGradDirs::DownDiagonal", L"" } }

};

static TEnumMap emapEGradDirs
(
     L"EGradDirs"
     , 4
     , kCIDLib::False
     , aeitemValues_EGradDirs
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EGradDirs::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEGradDirs(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEGradDirs.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEGradDirs(const tCIDGraphDev::EGradDirs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEGradDirs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EGradDirs tCIDGraphDev::eXlatEGradDirs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EGradDirs(emapEGradDirs.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EGradDirs eVal)
{
    strmTar << emapEGradDirs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EGradDirs operator++(tCIDGraphDev::EGradDirs& eVal, int)
{
    tCIDGraphDev::EGradDirs eTmp = eVal;
    eVal = tCIDGraphDev::EGradDirs(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EGradDirs eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EGradDirs& eVal)
{
    eVal = tCIDGraphDev::EGradDirs(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EGradDirs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EGradDirs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EGradDirs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EGradDirs eVal)
{
    return emapEGradDirs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ELineEnds[3] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::ELineEnds::Flat), 0, 0,  { L"", L"", L"", L"Flat", L"ELineEnds::Flat", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineEnds::Square), 0, 0,  { L"", L"", L"", L"Square", L"ELineEnds::Square", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineEnds::Round), 0, 0,  { L"", L"", L"", L"Round", L"ELineEnds::Round", L"" } }

};

static TEnumMap emapELineEnds
(
     L"ELineEnds"
     , 3
     , kCIDLib::False
     , aeitemValues_ELineEnds
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::ELineEnds::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatELineEnds(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapELineEnds.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatELineEnds(const tCIDGraphDev::ELineEnds eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELineEnds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::ELineEnds tCIDGraphDev::eXlatELineEnds(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ELineEnds(emapELineEnds.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::ELineEnds eVal)
{
    strmTar << emapELineEnds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::ELineEnds operator++(tCIDGraphDev::ELineEnds& eVal, int)
{
    tCIDGraphDev::ELineEnds eTmp = eVal;
    eVal = tCIDGraphDev::ELineEnds(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::ELineEnds eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::ELineEnds& eVal)
{
    eVal = tCIDGraphDev::ELineEnds(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::ELineEnds* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::ELineEnds(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::ELineEnds* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::ELineEnds eVal)
{
    return emapELineEnds.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ELineJoins[3] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::ELineJoins::Bevel), 0, 0,  { L"", L"", L"", L"Bevel", L"ELineJoins::Bevel", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineJoins::Round), 0, 0,  { L"", L"", L"", L"Round", L"ELineJoins::Round", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineJoins::Mitre), 0, 0,  { L"", L"", L"", L"Mitre", L"ELineJoins::Mitre", L"" } }

};

static TEnumMap emapELineJoins
(
     L"ELineJoins"
     , 3
     , kCIDLib::False
     , aeitemValues_ELineJoins
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::ELineJoins::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatELineJoins(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapELineJoins.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatELineJoins(const tCIDGraphDev::ELineJoins eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELineJoins.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::ELineJoins tCIDGraphDev::eXlatELineJoins(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ELineJoins(emapELineJoins.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::ELineJoins eVal)
{
    strmTar << emapELineJoins.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::ELineJoins operator++(tCIDGraphDev::ELineJoins& eVal, int)
{
    tCIDGraphDev::ELineJoins eTmp = eVal;
    eVal = tCIDGraphDev::ELineJoins(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::ELineJoins eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::ELineJoins& eVal)
{
    eVal = tCIDGraphDev::ELineJoins(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::ELineJoins* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::ELineJoins(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::ELineJoins* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::ELineJoins eVal)
{
    return emapELineJoins.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ELineStyles[7] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::Solid), 0, 0,  { L"", L"", L"", L"Solid", L"ELineStyles::Solid", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::Dot), 0, 0,  { L"", L"", L"", L"Dot", L"ELineStyles::Dot", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::Dash), 0, 0,  { L"", L"", L"", L"Dash", L"ELineStyles::Dash", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::DashDot), 0, 0,  { L"", L"", L"", L"DashDot", L"ELineStyles::DashDot", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::DashDoubleDot), 0, 0,  { L"", L"", L"", L"DashDoubleDot", L"ELineStyles::DashDoubleDot", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::Invisible), 0, 0,  { L"", L"", L"", L"Invisible", L"ELineStyles::Invisible", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ELineStyles::Alternate), 0, 0,  { L"", L"", L"", L"Alternate", L"ELineStyles::Alternate", L"" } }

};

static TEnumMap emapELineStyles
(
     L"ELineStyles"
     , 7
     , kCIDLib::False
     , aeitemValues_ELineStyles
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::ELineStyles::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatELineStyles(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapELineStyles.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatELineStyles(const tCIDGraphDev::ELineStyles eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELineStyles.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::ELineStyles tCIDGraphDev::eXlatELineStyles(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ELineStyles(emapELineStyles.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::ELineStyles eVal)
{
    strmTar << emapELineStyles.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::ELineStyles operator++(tCIDGraphDev::ELineStyles& eVal, int)
{
    tCIDGraphDev::ELineStyles eTmp = eVal;
    eVal = tCIDGraphDev::ELineStyles(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::ELineStyles eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::ELineStyles& eVal)
{
    eVal = tCIDGraphDev::ELineStyles(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::ELineStyles* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::ELineStyles(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::ELineStyles* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::ELineStyles eVal)
{
    return emapELineStyles.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMixModes[16] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::Black), 0, 0,  { L"", L"", L"", L"Black", L"EMixModes::Black", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::CopyPen), 0, 0,  { L"", L"", L"", L"CopyPen", L"EMixModes::CopyPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::MaskNotPen), 0, 0,  { L"", L"", L"", L"MaskNotPen", L"EMixModes::MaskNotPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::MaskPen), 0, 0,  { L"", L"", L"", L"MaskPen", L"EMixModes::MaskPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::MaskPenNot), 0, 0,  { L"", L"", L"", L"MaskPenNot", L"EMixModes::MaskPenNot", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::MergeNotPen), 0, 0,  { L"", L"", L"", L"MergeNotPen", L"EMixModes::MergeNotPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::MergePen), 0, 0,  { L"", L"", L"", L"MergePen", L"EMixModes::MergePen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::MergePenNot), 0, 0,  { L"", L"", L"", L"MergePenNot", L"EMixModes::MergePenNot", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::NOP), 0, 0,  { L"", L"", L"", L"NOP", L"EMixModes::NOP", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::Not), 0, 0,  { L"", L"", L"", L"Not", L"EMixModes::Not", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::NotCopyPen), 0, 0,  { L"", L"", L"", L"NotCopyPen", L"EMixModes::NotCopyPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::NotMaskPen), 0, 0,  { L"", L"", L"", L"NotMaskPen", L"EMixModes::NotMaskPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::NotMergePen), 0, 0,  { L"", L"", L"", L"NotMergePen", L"EMixModes::NotMergePen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::NotXorPen), 0, 0,  { L"", L"", L"", L"NotXorPen", L"EMixModes::NotXorPen", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::White), 0, 0,  { L"", L"", L"", L"White", L"EMixModes::White", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EMixModes::XorPen), 0, 0,  { L"", L"", L"", L"XorPen", L"EMixModes::XorPen", L"" } }

};

static TEnumMap emapEMixModes
(
     L"EMixModes"
     , 16
     , kCIDLib::False
     , aeitemValues_EMixModes
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EMixModes::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEMixModes(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEMixModes.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEMixModes(const tCIDGraphDev::EMixModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMixModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EMixModes tCIDGraphDev::eXlatEMixModes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EMixModes(emapEMixModes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EMixModes eVal)
{
    strmTar << emapEMixModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EMixModes operator++(tCIDGraphDev::EMixModes& eVal, int)
{
    tCIDGraphDev::EMixModes eTmp = eVal;
    eVal = tCIDGraphDev::EMixModes(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EMixModes eVal)
{
    return emapEMixModes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPatterns[7] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::Solid), 0, 0,  { L"", L"", L"", L"Solid", L"EPatterns::Solid", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::BackDiagonal), 0, 0,  { L"", L"", L"", L"BackDiagonal", L"EPatterns::BackDiagonal", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::Cross), 0, 0,  { L"", L"", L"", L"Cross", L"EPatterns::Cross", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::DiagonalCross), 0, 0,  { L"", L"", L"", L"DiagonalCross", L"EPatterns::DiagonalCross", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::ForwardDiagonal), 0, 0,  { L"", L"", L"", L"ForwardDiagonal", L"EPatterns::ForwardDiagonal", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::Horizontal), 0, 0,  { L"", L"", L"", L"Horizontal", L"EPatterns::Horizontal", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPatterns::Vertical), 0, 0,  { L"", L"", L"", L"Vertical", L"EPatterns::Vertical", L"" } }

};

static TEnumMap emapEPatterns
(
     L"EPatterns"
     , 7
     , kCIDLib::False
     , aeitemValues_EPatterns
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EPatterns::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEPatterns(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEPatterns.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEPatterns(const tCIDGraphDev::EPatterns eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPatterns.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EPatterns tCIDGraphDev::eXlatEPatterns(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EPatterns(emapEPatterns.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EPatterns eVal)
{
    strmTar << emapEPatterns.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EPatterns operator++(tCIDGraphDev::EPatterns& eVal, int)
{
    tCIDGraphDev::EPatterns eTmp = eVal;
    eVal = tCIDGraphDev::EPatterns(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EPatterns eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EPatterns& eVal)
{
    eVal = tCIDGraphDev::EPatterns(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EPatterns* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EPatterns(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EPatterns* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EPatterns eVal)
{
    return emapEPatterns.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPlacement[7] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::Center), 0, 0,  { L"", L"", L"", L"Center", L"EPlacement::Center", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::SizeToFit), 0, 0,  { L"", L"", L"", L"SizeToFit", L"EPlacement::SizeToFit", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::Tile), 0, 0,  { L"", L"", L"", L"Tile", L"EPlacement::Tile", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::UpperLeft), 0, 0,  { L"", L"", L"", L"UpperLeft", L"EPlacement::UpperLeft", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::SizeIfTooBig), 0, 0,  { L"", L"", L"", L"SizeIfTooBig", L"EPlacement::SizeIfTooBig", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::KeepAR), 0, 0,  { L"", L"", L"", L"KeepAR", L"EPlacement::KeepAR", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::EPlacement::FitAR), 0, 0,  { L"", L"", L"", L"FitAR", L"EPlacement::FitAR", L"" } }

};

static TEnumMap emapEPlacement
(
     L"EPlacement"
     , 7
     , kCIDLib::False
     , aeitemValues_EPlacement
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::EPlacement::Count)
);

tCIDLib::TVoid tCIDGraphDev::FormatEPlacement(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEPlacement.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatEPlacement(const tCIDGraphDev::EPlacement eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPlacement.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::EPlacement tCIDGraphDev::eXlatEPlacement(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::EPlacement(emapEPlacement.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::EPlacement eVal)
{
    strmTar << emapEPlacement.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::EPlacement operator++(tCIDGraphDev::EPlacement& eVal, int)
{
    tCIDGraphDev::EPlacement eTmp = eVal;
    eVal = tCIDGraphDev::EPlacement(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::EPlacement eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::EPlacement& eVal)
{
    eVal = tCIDGraphDev::EPlacement(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::EPlacement* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::EPlacement(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::EPlacement* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::EPlacement eVal)
{
    return emapEPlacement.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ESysBmps[34] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::None), 0, 0,  { L"", L"", L"", L"None", L"ESysBmps::None", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Close), 0, 0,  { L"", L"", L"", L"Close", L"ESysBmps::Close", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::UpArrow), 0, 0,  { L"", L"", L"", L"UpArrow", L"ESysBmps::UpArrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::DownArrow), 0, 0,  { L"", L"", L"", L"DownArrow", L"ESysBmps::DownArrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::RightArrow), 0, 0,  { L"", L"", L"", L"RightArrow", L"ESysBmps::RightArrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::LeftArrow), 0, 0,  { L"", L"", L"", L"LeftArrow", L"ESysBmps::LeftArrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Reduce), 0, 0,  { L"", L"", L"", L"Reduce", L"ESysBmps::Reduce", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Zoom), 0, 0,  { L"", L"", L"", L"Zoom", L"ESysBmps::Zoom", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Restore), 0, 0,  { L"", L"", L"", L"Restore", L"ESysBmps::Restore", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Reduced), 0, 0,  { L"", L"", L"", L"Reduced", L"ESysBmps::Reduced", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Zoomed), 0, 0,  { L"", L"", L"", L"Zoomed", L"ESysBmps::Zoomed", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Restored), 0, 0,  { L"", L"", L"", L"Restored", L"ESysBmps::Restored", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::UpArrowD), 0, 0,  { L"", L"", L"", L"UpArrowD", L"ESysBmps::UpArrowD", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::DownArrowD), 0, 0,  { L"", L"", L"", L"DownArrowD", L"ESysBmps::DownArrowD", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::RightArrowD), 0, 0,  { L"", L"", L"", L"RightArrowD", L"ESysBmps::RightArrowD", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::LeftArrowD), 0, 0,  { L"", L"", L"", L"LeftArrowD", L"ESysBmps::LeftArrowD", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::MnArrow), 0, 0,  { L"", L"", L"", L"MnArrow", L"ESysBmps::MnArrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Combo), 0, 0,  { L"", L"", L"", L"Combo", L"ESysBmps::Combo", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::UpArrowI), 0, 0,  { L"", L"", L"", L"UpArrowI", L"ESysBmps::UpArrowI", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::DownArrowI), 0, 0,  { L"", L"", L"", L"DownArrowI", L"ESysBmps::DownArrowI", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::RightArrowI), 0, 0,  { L"", L"", L"", L"RightArrowI", L"ESysBmps::RightArrowI", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::LeftArrowI), 0, 0,  { L"", L"", L"", L"LeftArrowI", L"ESysBmps::LeftArrowI", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Size), 0, 0,  { L"", L"", L"", L"Size", L"ESysBmps::Size", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::BtSize), 0, 0,  { L"", L"", L"", L"BtSize", L"ESysBmps::BtSize", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Check), 0, 0,  { L"", L"", L"", L"Check", L"ESysBmps::Check", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone1), 0, 0,  { L"", L"", L"", L"Halftone1", L"ESysBmps::Halftone1", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone2), 0, 0,  { L"", L"", L"", L"Halftone2", L"ESysBmps::Halftone2", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone3), 0, 0,  { L"", L"", L"", L"Halftone3", L"ESysBmps::Halftone3", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone4), 0, 0,  { L"", L"", L"", L"Halftone4", L"ESysBmps::Halftone4", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone5), 0, 0,  { L"", L"", L"", L"Halftone5", L"ESysBmps::Halftone5", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone6), 0, 0,  { L"", L"", L"", L"Halftone6", L"ESysBmps::Halftone6", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone7), 0, 0,  { L"", L"", L"", L"Halftone7", L"ESysBmps::Halftone7", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone8), 0, 0,  { L"", L"", L"", L"Halftone8", L"ESysBmps::Halftone8", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysBmps::Halftone9), 0, 0,  { L"", L"", L"", L"Halftone9", L"ESysBmps::Halftone9", L"" } }

};

static TEnumMap emapESysBmps
(
     L"ESysBmps"
     , 34
     , kCIDLib::False
     , aeitemValues_ESysBmps
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::ESysBmps::Count)
);

const TString& tCIDGraphDev::strAltXlatESysBmps(const tCIDGraphDev::ESysBmps eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapESysBmps.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::ESysBmps tCIDGraphDev::eAltXlatESysBmps(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ESysBmps(emapESysBmps.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDGraphDev::ESysBmps operator++(tCIDGraphDev::ESysBmps& eVal, int)
{
    tCIDGraphDev::ESysBmps eTmp = eVal;
    eVal = tCIDGraphDev::ESysBmps(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::ESysBmps eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::ESysBmps& eVal)
{
    eVal = tCIDGraphDev::ESysBmps(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::ESysBmps* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::ESysBmps(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::ESysBmps* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::ESysBmps eVal)
{
    return emapESysBmps.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ESysPtrs[14] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::AppStarting), 0, 0,  { L"", L"", L"", L"AppStarting", L"ESysPtrs::AppStarting", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::Arrow), 0, 0,  { L"", L"", L"", L"Arrow", L"ESysPtrs::Arrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::Cross), 0, 0,  { L"", L"", L"", L"Cross", L"ESysPtrs::Cross", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::Hand), 0, 0,  { L"", L"", L"", L"Hand", L"ESysPtrs::Hand", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::Help), 0, 0,  { L"", L"", L"", L"Help", L"ESysPtrs::Help", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::IBeam), 0, 0,  { L"", L"", L"", L"IBeam", L"ESysPtrs::IBeam", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::No), 0, 0,  { L"", L"", L"", L"No", L"ESysPtrs::No", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::SizeAll), 0, 0,  { L"", L"", L"", L"SizeAll", L"ESysPtrs::SizeAll", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::SizeNESW), 0, 0,  { L"", L"", L"", L"SizeNESW", L"ESysPtrs::SizeNESW", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::SizeNS), 0, 0,  { L"", L"", L"", L"SizeNS", L"ESysPtrs::SizeNS", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::SizeNWSE), 0, 0,  { L"", L"", L"", L"SizeNWSE", L"ESysPtrs::SizeNWSE", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::SizeWE), 0, 0,  { L"", L"", L"", L"SizeWE", L"ESysPtrs::SizeWE", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::UpArrow), 0, 0,  { L"", L"", L"", L"UpArrow", L"ESysPtrs::UpArrow", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ESysPtrs::Wait), 0, 0,  { L"", L"", L"", L"Wait", L"ESysPtrs::Wait", L"" } }

};

static TEnumMap emapESysPtrs
(
     L"ESysPtrs"
     , 14
     , kCIDLib::False
     , aeitemValues_ESysPtrs
     , nullptr
     , tCIDLib::TCard4(tCIDGraphDev::ESysPtrs::Count)
);

const TString& tCIDGraphDev::strXlatESysPtrs(const tCIDGraphDev::ESysPtrs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapESysPtrs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::ESysPtrs tCIDGraphDev::eXlatESysPtrs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ESysPtrs(emapESysPtrs.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::ESysPtrs eVal)
{
    strmTar << emapESysPtrs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::ESysPtrs eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::ESysPtrs& eVal)
{
    eVal = tCIDGraphDev::ESysPtrs(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::ESysPtrs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::ESysPtrs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::ESysPtrs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::ESysPtrs eVal)
{
    return emapESysPtrs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ETextFX[6] = 
{
    {  tCIDLib::TInt4(tCIDGraphDev::ETextFX::None), 0, kGrDevMsgs::midTextFX_None,  { L"", L"", L"", L"None", L"ETextFX::None", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ETextFX::Gradient), 0, kGrDevMsgs::midTextFX_Gradient,  { L"", L"", L"", L"Gradient", L"ETextFX::Gradient", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ETextFX::GradientRefl), 0, kGrDevMsgs::midTextFX_GradientRefl,  { L"", L"", L"", L"GradientRefl", L"ETextFX::GradientRefl", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ETextFX::Reflected), 0, kGrDevMsgs::midTextFX_Reflected,  { L"", L"", L"", L"Reflected", L"ETextFX::Reflected", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ETextFX::GaussianBlur), 0, kGrDevMsgs::midTextFX_GaussianBlur,  { L"", L"", L"", L"GaussianBlur", L"ETextFX::GaussianBlur", L"" } }
  , {  tCIDLib::TInt4(tCIDGraphDev::ETextFX::DropShadow), 0, kGrDevMsgs::midTextFX_DropShadow,  { L"", L"", L"", L"DropShadow", L"ETextFX::DropShadow", L"" } }

};

static TEnumMap emapETextFX
(
     L"ETextFX"
     , 6
     , kCIDLib::False
     , aeitemValues_ETextFX
     , &facCIDGraphDev()
     , tCIDLib::TCard4(tCIDGraphDev::ETextFX::Count)
);

const TString& tCIDGraphDev::strAltXlatETextFX(const tCIDGraphDev::ETextFX eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapETextFX.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCIDGraphDev::ETextFX tCIDGraphDev::eAltXlatETextFX(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ETextFX(emapETextFX.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TVoid tCIDGraphDev::FormatETextFX(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapETextFX.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCIDGraphDev::strXlatETextFX(const tCIDGraphDev::ETextFX eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapETextFX.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCIDGraphDev::ETextFX tCIDGraphDev::eXlatETextFX(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCIDGraphDev::ETextFX(emapETextFX.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDGraphDev::ETextFX eVal)
{
    strmTar << emapETextFX.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDGraphDev::ETextFX operator++(tCIDGraphDev::ETextFX& eVal, int)
{
    tCIDGraphDev::ETextFX eTmp = eVal;
    eVal = tCIDGraphDev::ETextFX(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCIDGraphDev::ETextFX eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCIDGraphDev::ETextFX& eVal)
{
    eVal = tCIDGraphDev::ETextFX(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCIDGraphDev::ETextFX* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCIDGraphDev::ETextFX(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCIDGraphDev::ETextFX* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCIDGraphDev::bIsValidEnum(const tCIDGraphDev::ETextFX eVal)
{
    return emapETextFX.bIsValidEnum(tCIDLib::TCard4(eVal));

}

