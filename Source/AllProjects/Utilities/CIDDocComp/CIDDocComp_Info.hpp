// ----------------------------------------------------------------------------
//  FILE: CIDDocComp_Info.hpp
//  DATE: Mon, Jun 03 00:38:31 2019 -0400
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kCIDDocComp
{
    
    // ------------------------------------------------------------------------
    //  Values we look for in the XML cotnent.
    //                  
    // ------------------------------------------------------------------------
     const extern TString strXML_ColSpan;
     const extern TString strXML_DefValue;
     const extern TString strXML_Desc;
     const extern TString strXML_Extra;
     const extern TString strXML_Extra1;
     const extern TString strXML_Extra2;
     const extern TString strXML_FileName;
     const extern TString strXML_HelpText;
     const extern TString strXML_Id;
     const extern TString strXML_Keywords;
     const extern TString strXML_PageLink;
     const extern TString strXML_PageMap;
     const extern TString strXML_PageType;
     const extern TString strXML_Ref;
     const extern TString strXML_SubDir;
     const extern TString strXML_SubTopicMap;
     const extern TString strXML_Title;
     const extern TString strXML_TopicPage;
     const extern TString strXML_Type;
     const extern TString strXML_Virtual;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCIDDocComp
{
    
    // ------------------------------------------------------------------------
    //  The overall class element has a set of bitmap flags that indicate various possible attributes of that class. We can't use None for
    //  no flags since it's used to report a failure to translate a value,
    //  so we define NoFlags. XML doesn't allow an empty NMTOKENS attr
    //  so we have to have something as a default in the DTD.
    //                  
    // ------------------------------------------------------------------------
    enum class EClsFlags : tCIDLib::TCard4
    {
        Dup = 0x0001
        , Fmt = 0x0002
        , BStrm = 0x0004
        , NoFlags = 0x1000
        , Count = 4
        , None = 0
        , AllBits = 0x1007
    };
     EClsFlags eXlatEClsFlags(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEClsFlags(const EClsFlags eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     tCIDLib::TBoolean bIsValidEnum(const EClsFlags eVal);

    
    // ------------------------------------------------------------------------
    //  The method element has a multi-token attribute that we use to
    //  indicate the various attributes of a method. The base name is
    //  the XML value and the text is the C++ value (if any)
    //  
    //  Ctor/dtor is to allow us to mark mark those since they have special
    //  display requirements when we format them out.
    //                  
    // ------------------------------------------------------------------------
    enum class EMethAttrs : tCIDLib::TCard4
    {
        Const = 0x0001
        , ConstExpr = 0x0002
        , NoDiscard = 0x0004
        , NoExcept = 0x0008
        , Ctor = 0x0100
        , Dtor = 0x0200
        , NoAttrs = 0x1000
        , Count = 7
        , None = 0
        , AllBits = 0x130F
    };
     EMethAttrs eXlatEMethAttrs(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEMethAttrs(const EMethAttrs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     const TString& strLoadEMethAttrs(const EMethAttrs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     tCIDLib::TBoolean bIsValidEnum(const EMethAttrs eVal);

    
    // ------------------------------------------------------------------------
    //  The types of pages we support. These values are the same as those
    //  in the DTD, so we can map directly from that to this.
    //                  
    // ------------------------------------------------------------------------
    enum class EPageTypes
    {
        None
        , CppClass
        , HelpPage
        , Count
        , Min = None
        , Max = HelpPage
    };
     EPageTypes eXlatEPageTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEPageTypes(const EPageTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     const TString& strLoadEPageTypes(const EPageTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     tCIDLib::TBoolean bIsValidEnum(const EPageTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The possible directions of parameters.
    //                  
    // ------------------------------------------------------------------------
    enum class EParmDirs
    {
        In
        , Out
        , InOut
        , Count
        , Min = In
        , Max = InOut
    };
     EParmDirs eXlatEParmDirs(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEParmDirs(const EParmDirs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     tCIDLib::TBoolean bIsValidEnum(const EParmDirs eVal);

    
    // ------------------------------------------------------------------------
    //  The possible ways the parameter can be passed by.
    //  
    //      CPtr    - const pointer
    //      CPtrC   - const pointer to a const
    //      CRef    - const reference
    //      Ref     - non-const reference
    //      Ptr     - non-const pointer
    //      PtrCRef - A reference to a pointer to a const
    //      PtrRef  - A reference to a pointer to non-const
    //      Value   - by value
    //  
    //  These name is the same as what is in the XML, so we can translate
    //  directly.
    //                  
    // ------------------------------------------------------------------------
    enum class EParmPB
    {
        CPtr
        , CPtrC
        , CRef
        , Ref
        , Ptr
        , PtrCRef
        , PtrRef
        , Val
        , Count
        , Min = CPtr
        , Max = Val
    };
     EParmPB eXlatEParmPB(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEParmPB(const EParmPB eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     tCIDLib::TBoolean bIsValidEnum(const EParmPB eVal);

    
    // ------------------------------------------------------------------------
    //  The kinds of markup we support in our general help text content.
    //  These match the XML elements that represent these markup types.
    //                  
    // ------------------------------------------------------------------------
    enum class EMUTypes
    {
        None
        , Bold
        , Break
        , Code
        , DIV
        , Image
        , Indent
        , InlineNote
        , Italic
        , Link
        , List
        , ListItem
        , Note
        , Paragraph
        , SecTitle
        , SubSecTitle
        , Superscript
        , Table
        , TableCol
        , TableRow
        , Text
        , Count
        , Min = None
        , Max = Text
    };
     tCIDLib::TBoolean bIsValidEnum(const EMUTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The standard C++ class/structure visibility types
    //                  
    // ------------------------------------------------------------------------
    enum class EVisTypes
    {
        Public
        , Protected
        , Private
        , Count
        , Min = Public
        , Max = Private
    };
     EVisTypes eXlatEVisTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEVisTypes(const EVisTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     const TString& strLoadEVisTypes(const EVisTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     tCIDLib::TBoolean bIsValidEnum(const EVisTypes eVal);

}

#pragma CIDLIB_POPPACK

constexpr tCIDDocComp::EClsFlags operator|(const tCIDDocComp::EClsFlags eLHS, const tCIDDocComp::EClsFlags eRHS)
{    
    return tCIDDocComp::EClsFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCIDDocComp::EClsFlags& operator|=(tCIDDocComp::EClsFlags& eLHS, const tCIDDocComp::EClsFlags eRHS)
{    
    eLHS = tCIDDocComp::EClsFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}
constexpr tCIDDocComp::EClsFlags operator&(const tCIDDocComp::EClsFlags eLHS, const tCIDDocComp::EClsFlags eRHS)
{    
    return tCIDDocComp::EClsFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCIDDocComp::EClsFlags& operator&=(tCIDDocComp::EClsFlags& eLHS, const tCIDDocComp::EClsFlags eRHS)
{    
    eLHS = tCIDDocComp::EClsFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}

constexpr tCIDDocComp::EMethAttrs operator|(const tCIDDocComp::EMethAttrs eLHS, const tCIDDocComp::EMethAttrs eRHS)
{    
    return tCIDDocComp::EMethAttrs(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCIDDocComp::EMethAttrs& operator|=(tCIDDocComp::EMethAttrs& eLHS, const tCIDDocComp::EMethAttrs eRHS)
{    
    eLHS = tCIDDocComp::EMethAttrs(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}
constexpr tCIDDocComp::EMethAttrs operator&(const tCIDDocComp::EMethAttrs eLHS, const tCIDDocComp::EMethAttrs eRHS)
{    
    return tCIDDocComp::EMethAttrs(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCIDDocComp::EMethAttrs& operator&=(tCIDDocComp::EMethAttrs& eLHS, const tCIDDocComp::EMethAttrs eRHS)
{    
    eLHS = tCIDDocComp::EMethAttrs(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}
 TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDDocComp::EMethAttrs eToStream);

 TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDDocComp::EPageTypes eToStream);

 TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDDocComp::EParmDirs eToStream);



 TTextOutStream& operator<<(TTextOutStream& strmTar, const tCIDDocComp::EVisTypes eToStream);

