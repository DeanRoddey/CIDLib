// ----------------------------------------------------------------------------
//  FILE: VideoDemoC_IntfClientProxy.cpp
//  DATE: Wed, Jan 30 13:17:30 2019 -0500
//    ID: E1CCC9CBCFA1FDAF-29A8F7CB04763265
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "VideoDemoC.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TVideoDemoClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TVideoDemoClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TVideoDemoClientProxy::strInterfaceId(L"E1CCC9CBCFA1FDAF-29A8F7CB04763265");
const TString TVideoDemoClientProxy::strBinding(L"/VideoDemo/IntfImpl");



// ----------------------------------------------------------------------------
// TVideoDemoClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TVideoDemoClientProxy::TVideoDemoClientProxy()
{
}

TVideoDemoClientProxy::
TVideoDemoClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TVideoDemoClientProxy::~TVideoDemoClientProxy()
{
}

// ----------------------------------------------------------------------------
// TVideoDemoClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TVideoDemoClientProxy::bQueryByName
(
    const TString& strToFind
    , TDemoRecord& recFound)
{
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryByName");
        ocmdToUse.strmOut() << strToFind;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> recFound;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TVideoDemoClientProxy::bQueryAllStatus
(
    const tVideoDemoSh::EStatus eToFind
    , TVector<TDemoRecord>& colFound)
{
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryAllStatus");
        ocmdToUse.strmOut() << eToFind;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colFound;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

